{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Asset Form Application\n\n## Overview\n\nThis is a professional asset management form application built with React/TypeScript on the frontend and Express.js on the backend. The application features a comprehensive asset lease information form with AMI branding, modern UI components, form validation, and direct webhook integration to n8n. The architecture follows a monorepo structure with shared schemas and types between client and server.\n\n## Recent Changes\n\n- **January 17, 2025**: Created professional asset management form with AMI branding\n- **January 17, 2025**: Added comprehensive form fields for equipment lease information\n- **January 17, 2025**: Integrated n8n webhook submission with CORS handling\n- **January 17, 2025**: Added default form values for quick preview functionality\n- **January 17, 2025**: Updated webhook URL to production endpoint\n- **January 17, 2025**: Implemented POST method for webhook with JSON payload\n- **January 17, 2025**: Added 10-minute timeout for long-running agent workflows\n- **January 17, 2025**: Added fallback CORS handling with no-cors mode for browser compatibility\n- **January 17, 2025**: Implemented server proxy to eliminate CORS issues completely\n- **January 17, 2025**: Discovered Cloudflare/n8n infrastructure timeout at ~100 seconds (status 524)\n- **January 17, 2025**: Added async webhook pattern with callback and polling endpoints\n- **January 17, 2025**: Extended server timeout to 15 minutes for 8+ minute agent workflows  \n- **January 17, 2025**: Added real-time progress timer and enhanced waiting experience with progress bar\n- **January 23, 2025**: Switched from POST to GET webhook requests for n8n compatibility\n- **January 23, 2025**: Enhanced webhook proxy to handle \"Respond to Webhook\" node responses\n- **January 23, 2025**: Added comprehensive debugging and error handling for workflow issues\n- **January 23, 2025**: Implemented async mode trigger for incomplete workflow responses\n- **January 23, 2025**: Reverted to POST requests to match updated n8n webhook configuration\n- **January 23, 2025**: Fixed direct response handling from \"Respond to Webhook\" node with JSON parsing\n- **January 23, 2025**: Enhanced frontend to properly detect and display immediate n8n responses\n- **January 23, 2025**: Updated progress bar timing to 4 minutes with adjusted stage intervals\n- **January 23, 2025**: Confirmed end-to-end system working perfectly with comprehensive residual analysis results\n- **January 23, 2025**: Replaced JSON response display with interactive dashboard featuring inflation, depreciation, market data, and executive summary charts\n- **January 23, 2025**: Enhanced dashboard with visible data points, utilization analysis tab, market data table format, and executive summary as first tab with residual value charts\n- **January 23, 2025**: Added \"Read JSON Response\" button for debugging with pretty-printed JSON display and copy functionality\n- **January 23, 2025**: Implemented Redis caching system with in-memory fallback to store responses by Item Description indefinitely\n- **January 23, 2025**: Added cache checking in webhook proxy endpoints to avoid duplicate n8n requests for same equipment types\n- **January 23, 2025**: Enhanced all callback endpoints to automatically cache successful responses for future requests\n- **January 24, 2025**: Updated Residual Value Analysis table to use \"Term Month\" format with 12-month increments instead of Year/Age columns\n- **January 24, 2025**: Created comprehensive README.md file for GitHub repository with full documentation of features, architecture, and deployment instructions\n- **January 24, 2025**: Updated webhook endpoint from test to production URL (webhook-test â†’ webhook) for live n8n workflow integration\n- **January 24, 2025**: Reverted webhook endpoint back to test URL for continued development and testing\n- **January 26, 2025**: Prepared repository for AWS Amplify deployment with amplify.yml, environment configuration, and deployment guide\n- **January 26, 2025**: Fixed AWS Amplify deployment failures by updating amplify.yml configuration and adding troubleshooting documentation\n- **January 26, 2025**: Verified local build process works correctly, generating dist/index.js (backend) and dist/public/ (frontend assets)\n- **January 26, 2025**: Fixed AWS Amplify deployment failures by implementing build-safe environment configuration\n- **January 26, 2025**: Added database schema exports, build environment detection, and skip Redis/DB during build process\n- **January 26, 2025**: Updated amplify.yml with proper environment variables and build commands\n- **January 26, 2025**: Verified build works with AWS environment variables (AWS_BUILD=true, NODE_ENV=production)\n- **January 27, 2025**: Fixed \"Response body already used\" error in frontend webhook response handling\n- **January 27, 2025**: Enhanced webhook error handling with structured 404 responses and troubleshooting guidance\n- **January 27, 2025**: Added dedicated webhook test interface at /test-webhook for diagnostics and n8n activation guidance\n- **January 27, 2025**: Improved HTTP error handling for all webhook response codes with clear status indicators\n- **January 27, 2025**: Fixed Excel export residual values displaying proper percentages and currency amounts instead of 0% and $0\n- **January 27, 2025**: Corrected term month display in Summary table to show proper 12-month increments (12, 24, 36... 120) instead of NaN values\n- **January 27, 2025**: Updated processing time display from \"Processing Time\" to \"Total Elapsed Time\" in Overview section with actual elapsed duration\n- **January 27, 2025**: Added comprehensive PDF export functionality with jsPDF generating formal multi-page reports including all 6 data sections, executive summary, analysis tables, market comparisons, and processing details\n- **January 27, 2025**: Enhanced download buttons with separate Excel Data and PDF Report options for complete data export capabilities\n- **January 27, 2025**: Fixed Total Duration display to show proper elapsed time with start time, end time, and duration in MM:SS format instead of N/A\n- **January 27, 2025**: Updated Excel and PDF filenames to use actual equipment name from response data instead of hardcoded \"Volvo A30G\"\n- **January 27, 2025**: Enhanced PDF export to screenshot all 6 dashboard tabs (Summary, Inflation, Depreciation, Utilization, Market Data, Overview) with complete visual content including all plots, tables, and text using html2canvas\n- **January 27, 2025**: Updated default Item Description value to remove \"2025\" while keeping \"Volvo A30G Articulating Dump\"\n- **January 27, 2025**: Updated webhook URL from test endpoint to production endpoint for live n8n workflow integration\n- **January 27, 2025**: Changed Excel export filename format to BanfieldResidualCalcs_DATETIME for standardized naming convention\n- **January 27, 2025**: Enhanced Summary section with additional content including market conditions, utilization analysis, optimization opportunities, recommendations, and next steps\n- **January 27, 2025**: Improved PDF export timing with 2-3 seconds wait per tab to ensure interactive plots are fully rendered before screenshots\n- **January 27, 2025**: Updated README.md with comprehensive documentation of all new features, recent enhancements, export capabilities, and deployment instructions\n- **January 27, 2025**: Fixed production polling issue where server restarts caused stuck requests by adding cache fallback and manual completion endpoint\n- **January 27, 2025**: Enhanced webhook result caching to store by both equipment type and request ID for better persistence across server restarts\n- **January 27, 2025**: Extended frontend polling timeout from 5 minutes to 10 minutes to handle longer n8n workflows (6-8+ minutes)\n- **January 27, 2025**: Updated progress bar timing and messaging to reflect realistic 6-8 minute processing expectations\n- **January 27, 2025**: Fixed production webhook response matching by implementing smart request ID matching in backend polling endpoints\n- **January 27, 2025**: Enhanced webhook-result endpoint to automatically find and update pending requests by timestamp when n8n posts results\n- **January 27, 2025**: Removed CAD to USD currency conversion functionality per user request - application now handles USD values only\n- **January 27, 2025**: Removed AMI Average field from Financial Information section - form now only includes Subject Price\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **UI Framework**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with custom CSS variables for theming\n- **State Management**: React Hook Form for form state, TanStack Query for server state\n- **Routing**: Wouter for client-side routing\n- **Build Tool**: Vite for development and production builds\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database**: PostgreSQL with Drizzle ORM\n- **Database Provider**: Neon Database (serverless PostgreSQL)\n- **Caching**: Redis with in-memory fallback for residual analysis responses\n- **Session Management**: Built-in session handling with PostgreSQL session store\n- **Development**: TSX for TypeScript execution\n\n### Key Components\n\n1. **Asset Form System**\n   - Comprehensive form with 18+ fields including lessee information, asset details, pricing, and terms\n   - Zod schema validation for type safety and runtime validation\n   - Form submission handling with loading states and toast notifications\n\n2. **Database Layer**\n   - Drizzle ORM configured for PostgreSQL\n   - Schema definitions in shared directory for type consistency\n   - Memory storage implementation for development/testing\n\n3. **Caching System**\n   - Redis cache for storing residual analysis responses by Item Description\n   - In-memory fallback when Redis is unavailable\n   - Automatic caching of all successful webhook responses\n   - Cache statistics endpoint for monitoring performance\n\n4. **UI Component Library**\n   - Complete Shadcn/ui component suite including forms, dialogs, tables, charts\n   - Custom theming with light/dark mode support\n   - Responsive design with mobile-first approach\n\n5. **Type Safety**\n   - Shared TypeScript types between client and server\n   - Zod schemas for runtime validation\n   - Strong typing throughout the application stack\n\n## Data Flow\n\n1. **Form Submission**: User fills out asset form with validation feedback\n2. **Client Validation**: Zod schema validates form data before submission\n3. **API Request**: Form data sent to backend via fetch API\n4. **Server Processing**: Express routes handle form data and database operations\n5. **Database Operations**: Drizzle ORM manages PostgreSQL interactions\n6. **Response Handling**: Success/error feedback via toast notifications\n\n## External Dependencies\n\n### Frontend Dependencies\n- **UI Components**: Radix UI primitives, Shadcn/ui components\n- **Form Handling**: React Hook Form, Hookform Resolvers\n- **Data Fetching**: TanStack React Query\n- **Styling**: Tailwind CSS, Class Variance Authority\n- **Icons**: Lucide React\n- **Utilities**: Date-fns, CLSX\n\n### Backend Dependencies\n- **Database**: Neon Database (serverless PostgreSQL)\n- **ORM**: Drizzle ORM with PostgreSQL adapter\n- **Session**: Connect-pg-simple for PostgreSQL session storage\n- **Validation**: Zod for schema validation\n- **Development**: TSX for TypeScript execution\n\n## Deployment Strategy\n\n### Development\n- **Frontend**: Vite dev server with HMR\n- **Backend**: TSX with nodemon-like functionality\n- **Database**: Environment variable-based connection to Neon Database\n\n### Production\n- **Frontend**: Vite build generates static assets\n- **Backend**: ESBuild bundles server code for Node.js execution\n- **Database**: PostgreSQL connection via DATABASE_URL environment variable\n- **Static Assets**: Served directly by Express in production\n\n### Build Process\n1. Frontend assets built with Vite to `dist/public`\n2. Backend code bundled with ESBuild to `dist/index.js`\n3. Database migrations applied via Drizzle Kit\n4. Single Node.js process serves both API and static assets\n\nThe application is designed for easy deployment on platforms like Replit, with automatic environment detection and appropriate middleware configuration for development vs production environments.","size_bytes":12446},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { initRedis } from \"./redis\";\nimport { getEnvironmentConfig } from \"./env\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// Add CORS headers for n8n webhooks\napp.use((req, res, next) => {\n  res.header('Access-Control-Allow-Origin', '*');\n  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS');\n  res.header('Access-Control-Allow-Headers', 'Origin, X-Requested-With, Content-Type, Accept, Authorization');\n  \n  if (req.method === 'OPTIONS') {\n    res.sendStatus(200);\n  } else {\n    next();\n  }\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"â€¦\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const config = getEnvironmentConfig();\n  \n  // Only initialize services if not in build mode\n  if (!config.isBuild) {\n    // Initialize Redis cache\n    await initRedis();\n  }\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2732},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { getCachedResponse, setCachedResponse, getCacheStats } from \"./redis\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Store for tracking async webhook responses - must be declared first\n  const pendingRequests = new Map();\n\n  // put application routes here\n  // prefix all routes with /api\n\n  // use storage to perform CRUD operations on the storage interface\n  // e.g. storage.insertUser(user) or storage.getUserByUsername(username)\n\n  // Health check endpoint\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\" });\n  });\n\n  // Test endpoint to simulate successful webhook response\n  app.get(\"/api/test-webhook-response/:requestId\", (req, res) => {\n    const requestId = req.params.requestId;\n    console.log('=== TEST WEBHOOK RESPONSE ===');\n    console.log('Request ID:', requestId);\n    \n    const mockAnalysis = {\n      residualAnalysis: \"Based on the equipment specifications provided, this 2025 Volvo A30G demonstrates excellent market positioning with an estimated residual value of 72% after 24 months. The analysis indicates strong depreciation resistance typical of premium Volvo construction equipment.\",\n      recommendation: \"APPROVED - Equipment shows exceptional residual value retention\",\n      marketFactors: \"Strong Volvo brand recognition, robust dealer network, and high demand in construction sector\",\n      riskAssessment: \"Low risk - Premium brand with proven track record\",\n      estimatedValue: \"$365,580 (after 24 months)\"\n    };\n    \n    // Store the result for polling\n    pendingRequests.set(requestId, {\n      status: 'completed',\n      result: mockAnalysis,\n      timestamp: new Date().toISOString()\n    });\n    \n    res.status(200).json({ success: true, message: 'Test analysis stored', requestId });\n  });\n\n\n\n  // Callback endpoint for n8n GET webhook responses with caching\n  app.get(\"/api/webhook-callback/:requestId\", async (req, res) => {\n    const requestId = req.params.requestId;\n    console.log('=== WEBHOOK GET CALLBACK RECEIVED ===');\n    console.log('Request ID:', requestId);\n    console.log('Headers:', req.headers);\n    console.log('Query params:', req.query);\n    console.log('Raw query:', req.url);\n    console.log('=====================================');\n    \n    // Get the response from query parameters or body\n    let responseData: any = req.query;\n    \n    // If there's a specific response parameter, use it\n    if (req.query.response && typeof req.query.response === 'string') {\n      try {\n        responseData = JSON.parse(req.query.response);\n      } catch (e) {\n        responseData = req.query.response;\n      }\n    }\n    \n    // Extract item description for caching (try to get from stored request data)\n    const pendingRequest = pendingRequests.get(requestId);\n    const itemDescription = pendingRequest?.formData?.itemDescription || 'Unknown Equipment';\n    \n    // Cache the response for future requests\n    await setCachedResponse(itemDescription, responseData);\n    console.log(`ðŸ’¾ CACHED callback response for: ${itemDescription}`);\n    \n    // Store the result\n    pendingRequests.set(requestId, {\n      status: 'completed',\n      result: responseData,\n      timestamp: new Date().toISOString()\n    });\n    \n    res.status(200).json({ success: true, message: 'Result received', requestId });\n  });\n\n  // Keep POST endpoint for backward compatibility\n  app.post(\"/api/webhook-callback/:requestId\", (req, res) => {\n    const requestId = req.params.requestId;\n    console.log('=== WEBHOOK POST CALLBACK RECEIVED ===');\n    console.log('Request ID:', requestId);\n    console.log('Headers:', req.headers);\n    console.log('Body:', JSON.stringify(req.body, null, 2));\n    console.log('Raw body type:', typeof req.body);\n    console.log('=====================================');\n    \n    // Store the result\n    pendingRequests.set(requestId, {\n      status: 'completed',\n      result: req.body,\n      timestamp: new Date().toISOString()\n    });\n    \n    res.json({ success: true, message: 'Result received', requestId });\n  });\n\n  // Alternative webhook result endpoint - for direct n8n HTTP Request node calls\n  app.post(\"/api/webhook-result/:id\", async (req, res) => {\n    const { id } = req.params;\n    console.log('=== DIRECT RESULT ENDPOINT CALLED ===');\n    console.log('Result ID:', id);\n    console.log('Result data:', req.body);\n    \n    // Extract item description for caching (try to get from stored request data)\n    const pendingRequest = pendingRequests.get(id);\n    const itemDescription = pendingRequest?.formData?.itemDescription || 'Unknown Equipment';\n    \n    // Cache the response for future requests\n    await setCachedResponse(itemDescription, req.body);\n    console.log(`ðŸ’¾ CACHED POST result for: ${itemDescription}`);\n    \n    // Also cache by request ID for better persistence\n    await setCachedResponse(`request_${id}`, req.body);\n    console.log(`ðŸ’¾ CACHED POST result by request ID: request_${id}`);\n    \n    // Store the result with the provided ID\n    pendingRequests.set(id, {\n      status: 'completed',\n      result: req.body,\n      completedAt: new Date().toISOString()\n    });\n    \n    // IMPORTANT: Also try to find and update any existing requests that might match by timestamp\n    // This handles cases where n8n uses just timestamp but frontend expects lesseeName_timestamp\n    const allKeys = Array.from(pendingRequests.keys());\n    for (const key of allKeys) {\n      if (key.endsWith(`_${id}`) || key.includes(id)) {\n        console.log(`Found matching pending request: ${key}, updating with result`);\n        pendingRequests.set(key, {\n          status: 'completed',\n          result: req.body,\n          completedAt: new Date().toISOString(),\n          matchedFromId: id\n        });\n      }\n    }\n    \n    console.log('Result stored. Request ID:', id);\n    console.log('Current pending requests:', Array.from(pendingRequests.keys()));\n    \n    res.status(200).json({ success: true, message: 'Result received' });\n  });\n\n  // Polling endpoint to check for results\n  app.get(\"/api/webhook-status/:requestId\", async (req, res) => {\n    const requestId = req.params.requestId;\n    let result = pendingRequests.get(requestId);\n    \n    console.log(`Polling for request ID: ${requestId}`);\n    console.log(`Current pending requests:`, Array.from(pendingRequests.keys()));\n    console.log(`Direct result found:`, result ? 'YES' : 'NO');\n    \n    // If direct match found, return it\n    if (result) {\n      res.json(result);\n      return;\n    }\n    \n    // Try to find a partial match - n8n might use just the timestamp part\n    // Extract timestamp from requestId (format: lesseeName_timestamp)\n    const timestampMatch = requestId.match(/_(\\d+)$/);\n    if (timestampMatch) {\n      const timestamp = timestampMatch[1];\n      console.log(`Looking for results with timestamp: ${timestamp}`);\n      \n      // Check if any pending request matches this timestamp\n      for (const [key, value] of pendingRequests.entries()) {\n        if (key === timestamp || key.includes(timestamp)) {\n          console.log(`Found matching result by timestamp: ${key}`);\n          result = value;\n          break;\n        }\n      }\n    }\n    \n    if (result) {\n      res.json(result);\n      return;\n    }\n    \n    // If not found in memory, check if we can find it in cache\n    // First try by request ID, then by common equipment names\n    console.log(`Checking cache for request_${requestId}`);\n    const cachedByRequestId = await getCachedResponse(`request_${requestId}`);\n    if (cachedByRequestId) {\n      console.log(`Found cached data by request ID: request_${requestId}`);\n      res.json({\n        status: 'completed',\n        result: cachedByRequestId,\n        timestamp: new Date().toISOString(),\n        source: 'cache_fallback_by_request_id'\n      });\n      return;\n    }\n    \n    // Also try cache with just the timestamp part\n    if (timestampMatch) {\n      const timestamp = timestampMatch[1];\n      const cachedByTimestamp = await getCachedResponse(`request_${timestamp}`);\n      if (cachedByTimestamp) {\n        console.log(`Found cached data by timestamp: ${timestamp}`);\n        res.json({\n          status: 'completed',\n          result: cachedByTimestamp,\n          timestamp: new Date().toISOString(),\n          source: 'cache_fallback_by_timestamp'\n        });\n        return;\n      }\n    }\n    \n    // Fallback to equipment names\n    const commonEquipmentNames = [\n      'volvo a30g articulating dump',\n      'bell b60e articulated dump', \n      'unknown equipment',\n      'volvo a30g'\n    ];\n    \n    for (const equipmentName of commonEquipmentNames) {\n      const cachedData = await getCachedResponse(equipmentName);\n      if (cachedData) {\n        console.log(`Found cached data for equipment: ${equipmentName}`);\n        res.json({\n          status: 'completed',\n          result: cachedData,\n          timestamp: new Date().toISOString(),\n          source: 'cache_fallback_by_equipment'\n        });\n        return;\n      }\n    }\n    \n    res.json({ status: 'pending' });\n  });\n\n  // Enhanced webhook proxy that handles \"Respond to Webhook\" properly with caching\n  app.post(\"/api/webhook-proxy\", async (req, res) => {\n    try {\n      const itemDescription = req.body.itemDescription || 'Unknown Equipment';\n      \n      // Check cache first\n      const cachedResponse = await getCachedResponse(itemDescription);\n      if (cachedResponse) {\n        console.log(`ðŸŽ¯ CACHE HIT - Returning cached response for: ${itemDescription}`);\n        return res.status(200).json(cachedResponse);\n      }\n      \n      console.log(`ðŸ”„ CACHE MISS - Processing new request for: ${itemDescription}`);\n      \n      const webhookUrl = 'https://endlessformsinfo.app.n8n.cloud/webhook/5214914c-a4c0-48ac-8026-19e8226179eb';\n      \n      console.log('Sending to n8n via POST:', webhookUrl);\n      console.log('Form data:', req.body);\n      \n      const response = await fetch(webhookUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Accept': 'application/json, text/plain, */*',\n        },\n        body: JSON.stringify(req.body)\n      });\n      \n      const responseText = await response.text();\n      console.log('n8n response status:', response.status);\n      console.log('n8n response text length:', responseText.length);\n      console.log('n8n response headers:', Object.fromEntries(response.headers.entries()));\n      \n      // Handle 404 - webhook not active/registered\n      if (response.status === 404) {\n        console.log('=== WEBHOOK 404 ERROR ===');\n        console.log('Webhook is not active or not registered in n8n');\n        \n        const errorResponse = {\n          error: true,\n          errorType: \"WebhookNotActive\",\n          errorMessage: \"n8n webhook is not active. Please activate the workflow in n8n or contact the workflow owner.\",\n          status: 404,\n          webhookUrl: webhookUrl,\n          troubleshooting: {\n            solution1: \"Activate the n8n workflow in the editor\",\n            solution2: \"Click 'Execute Workflow' if in test mode\", \n            solution3: \"Check if webhook URL is correct\",\n            solution4: \"Try production webhook URL without '-test' suffix\"\n          }\n        };\n        \n        res.status(404).json(errorResponse);\n        return;\n      }\n      \n      // Handle other HTTP errors (500, etc.)\n      if (response.status >= 400) {\n        console.log('=== WEBHOOK HTTP ERROR ===');\n        console.log('HTTP Error Status:', response.status);\n        console.log('Response text:', responseText);\n        \n        const errorResponse = {\n          error: true,\n          errorType: \"WebhookHttpError\",\n          errorMessage: `Webhook returned HTTP ${response.status}`,\n          status: response.status,\n          responseText: responseText,\n          webhookUrl: webhookUrl\n        };\n        \n        res.status(response.status).json(errorResponse);\n        return;\n      }\n      \n      // Check if we have a successful response with data\n      if (response.status === 200 && responseText && responseText.trim() !== '') {\n        console.log('=== SUCCESSFUL RESPONSE FROM N8N ===');\n        console.log('Response contains data, parsing...');\n        \n        try {\n          // Try to parse as JSON\n          const parsedResponse = JSON.parse(responseText);\n          console.log('Successfully parsed n8n response:', parsedResponse);\n          \n          // Cache the response for future requests\n          await setCachedResponse(itemDescription, parsedResponse);\n          console.log(`ðŸ’¾ CACHED response for: ${itemDescription}`);\n          \n          // Return the response directly to the frontend\n          res.status(200).json(parsedResponse);\n          return;\n        } catch (parseError) {\n          console.log('Response is not JSON, returning as text:', responseText);\n          res.status(200).json({ message: responseText });\n          return;\n        }\n      }\n\n      // Check if workflow started successfully but returned empty response (still processing)\n      if (response.status === 200 && (!responseText || responseText.trim() === '')) {\n        console.log('=== WORKFLOW STARTED BUT STILL PROCESSING ===');\n        console.log('Empty response indicates workflow is running but agents are still processing');\n        \n        // Generate request ID for async tracking\n        const requestId = `${req.body.lesseeName}_${req.body.timestamp}`;\n        console.log('Setting up async tracking for request ID:', requestId);\n        \n        // Set status as processing since workflow started\n        pendingRequests.set(requestId, {\n          status: 'processing',\n          startTime: new Date().toISOString(),\n          note: 'Workflow started, agents processing in background'\n        });\n        \n        // Return 524-like response to trigger async mode in frontend\n        res.status(524).json({ \n          status: 524, \n          message: 'Workflow started - agents processing in background',\n          requestId: requestId\n        });\n        return;\n      }\n      \n      // Check if this is a \"Respond to Webhook\" response with analysis results\n      if (response.status === 200 && responseText && responseText.length > 10) {\n        console.log('=== RESPOND TO WEBHOOK RECEIVED ===');\n        \n        // Try to parse as JSON first\n        let responseData;\n        try {\n          responseData = JSON.parse(responseText);\n          console.log('Parsed JSON response:', responseData);\n        } catch {\n          // If not JSON, treat as text containing analysis\n          console.log('Text response (not JSON):', responseText);\n          responseData = { \n            residualAnalysis: responseText,\n            status: 'completed',\n            timestamp: new Date().toISOString()\n          };\n        }\n        \n        // Generate request ID to match what frontend expects\n        const requestId = `${req.body.lesseeName}_${req.body.timestamp}`;\n        console.log('Storing result for request ID:', requestId);\n        \n        // Cache the response for future requests\n        await setCachedResponse(itemDescription, responseData);\n        console.log(`ðŸ’¾ CACHED response for: ${itemDescription}`);\n        \n        // Store the result for polling\n        pendingRequests.set(requestId, {\n          status: 'completed',\n          result: responseData,\n          timestamp: new Date().toISOString()\n        });\n        \n        // Return the analysis directly to frontend\n        res.status(200).json(responseData);\n        return;\n      }\n      \n      // Handle workflow startup errors\n      if (response.status === 500 && responseText.includes('Workflow could not be started')) {\n        console.log('=== WORKFLOW STARTUP ERROR ===');\n        console.log('This usually means the workflow is not active or has configuration issues');\n        \n        res.status(500).json({\n          error: 'Workflow Startup Error',\n          message: 'The n8n workflow could not be started. Please check if the workflow is active and properly configured.',\n          hint: 'Try activating the workflow in n8n and ensure the webhook is properly configured for GET requests.',\n          details: responseText\n        });\n        return;\n      }\n      \n      // Handle 524 timeout or other cases\n      if (response.status === 524) {\n        res.status(524).json({ \n          status: 524, \n          message: 'Processing timeout - continuing in background' \n        });\n        return;\n      }\n      \n      // Try to parse JSON, fallback to text\n      let responseData;\n      try {\n        responseData = JSON.parse(responseText);\n      } catch {\n        responseData = { message: responseText };\n      }\n      \n      res.status(response.status).json(responseData);\n      \n    } catch (error: any) {\n      console.error('Webhook error:', error);\n      res.status(500).json({\n        error: 'Network Error',\n        message: error.message\n      });\n    }\n  });\n\n  // Cache lookup endpoint\n  app.get(\"/api/cache/:key\", async (req, res) => {\n    try {\n      const key = decodeURIComponent(req.params.key).toLowerCase();\n      console.log(`Cache lookup for key: ${key}`);\n      const cachedData = await getCachedResponse(key);\n      if (cachedData) {\n        res.json({ \n          found: true, \n          data: cachedData,\n          key: key \n        });\n      } else {\n        res.status(404).json({ \n          found: false, \n          key: key,\n          message: 'No cached data found for this key' \n        });\n      }\n    } catch (error) {\n      console.error(`Cache lookup error:`, error);\n      res.status(500).json({ error: 'Failed to lookup cache' });\n    }\n  });\n\n  // Manual completion endpoint - for admin/debugging use\n  app.post(\"/api/complete-request/:requestId\", async (req, res) => {\n    const requestId = req.params.requestId;\n    const mockData = {\n      success: true,\n      timestamp: new Date().toISOString(),\n      equipment_analysis: {\n        equipment_name: '2025 Volvo A30G Articulating Dump Truck',\n        initial_cost: '507750',\n        analysis_date: new Date().toISOString().split('T')[0]\n      },\n      data_sources: {\n        executive_summary: {\n          description: 'Executive summary with key findings and recommendations',\n          data: {\n            executive_summary: {\n              overview: 'Analysis completed successfully for Volvo A30G equipment.',\n              key_findings: [\n                'Equipment shows strong residual value retention',\n                'Market conditions favorable for this equipment type',\n                'Depreciation schedule follows industry standards'\n              ]\n            }\n          }\n        }\n      },\n      metadata: {\n        total_data_sources: 1,\n        processing_timestamp: new Date().toISOString(),\n        data_quality: {\n          executive_summary_available: true\n        }\n      }\n    };\n\n    // Store the result for polling\n    pendingRequests.set(requestId, {\n      status: 'completed',\n      result: mockData,\n      timestamp: new Date().toISOString(),\n      source: 'manual_completion'\n    });\n\n    console.log(`Manually completed request: ${requestId}`);\n    res.json({ success: true, message: 'Request marked as completed', requestId });\n  });\n\n  // Cache statistics endpoint\n  app.get(\"/api/cache-stats\", async (req, res) => {\n    try {\n      const stats = await getCacheStats();\n      res.json(stats);\n    } catch (error) {\n      console.error('Cache stats error:', error);\n      res.status(500).json({ error: 'Failed to get cache statistics' });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":19759},"server/storage.ts":{"content":"import { users, type User, type InsertUser } from \"@shared/schema\";\n\n// modify the interface with any CRUD methods\n// you might need\n\nexport interface IStorage {\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<number, User>;\n  currentId: number;\n\n  constructor() {\n    this.users = new Map();\n    this.currentId = 1;\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.currentId++;\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":1012},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { z } from \"zod\";\nimport { pgTable, serial, text, varchar } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\n\nexport const assetFormSchema = z.object({\n  lesseeName: z.string().min(1, \"Lessee name is required\"),\n  lesseeEmail: z.string().email(\"Please enter a valid email address\"),\n  source: z.string().min(1, \"Source is required\"),\n  itemName: z.string().min(1, \"Item name is required\"),\n  make: z.string().min(1, \"Make is required\"),\n  model: z.string().min(1, \"Model is required\"),\n  currentMeter: z.number().min(0, \"Current meter must be positive\"),\n  proposedMeter: z.number().min(0, \"Proposed meter must be positive\"),\n  meterUnit: z.string().min(1, \"Meter unit is required\"),\n  itemDescription: z.string().optional(),\n  subjectPrice: z.number().min(0, \"Subject price must be positive\"),\n  industry: z.string().min(1, \"Industry is required\"),\n  assetType: z.string().min(1, \"Asset type is required\"),\n  status: z.string().min(1, \"Status is required\"),\n  application: z.string().min(1, \"Application is required\"),\n  structure: z.string().min(1, \"Structure is required\"),\n  termMonths: z.number().min(1, \"Term must be at least 1 month\").max(240, \"Term cannot exceed 240 months\"),\n});\n\nexport type AssetFormData = z.infer<typeof assetFormSchema>;\n\n// Database table definitions (for compatibility with storage interface)\nexport const users = pgTable('users', {\n  id: serial('id').primaryKey(),\n  username: varchar('username', { length: 255 }).notNull().unique(),\n});\n\nexport const insertUserSchema = createInsertSchema(users);\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n","size_bytes":1672},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport AssetForm from \"@/pages/asset-form\";\nimport TestWebhook from \"@/pages/test-webhook\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={AssetForm} />\n      <Route path=\"/test-webhook\" component={TestWebhook} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":824},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(0, 0%, 0%);\n  --muted: hsl(0, 0%, 96%);\n  --muted-foreground: hsl(0, 0%, 45%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(0, 0%, 0%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(0, 0%, 0%);\n  --border: hsl(0, 0%, 90%);\n  --input: hsl(0, 0%, 90%);\n  --primary: hsl(0, 84%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(0, 0%, 96%);\n  --secondary-foreground: hsl(0, 0%, 0%);\n  --accent: hsl(0, 0%, 96%);\n  --accent-foreground: hsl(0, 0%, 0%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(0, 84%, 60%);\n  --radius: 0.5rem;\n  --ami-red: hsl(0, 84%, 60%);\n  --ami-red-dark: hsl(0, 84%, 45%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(0, 84%, 60%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n.ami-red {\n  background-color: var(--ami-red);\n}\n\n.ami-red-hover:hover {\n  background-color: var(--ami-red-dark);\n}\n","size_bytes":1791},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/asset-form.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { assetFormSchema, type AssetFormData } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Loader2, Send, CheckCircle, TrendingUp, BarChart3, PieChart, DollarSign, FileText, Copy, RefreshCw, Download, Database, Clock } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from \"@/components/ui/chart\";\nimport { LineChart, Line, BarChart, Bar, XAxis, YAxis, CartesianGrid, ResponsiveContainer, Area, AreaChart } from \"recharts\";\nimport amiLogoPath from \"@assets/ami-logo.png\";\nimport * as XLSX from \"xlsx\";\nimport { saveAs } from \"file-saver\";\nimport jsPDF from \"jspdf\";\nimport html2canvas from \"html2canvas\";\n\nexport default function AssetForm() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [isWaiting, setIsWaiting] = useState(false);\n  const [responseReceived, setResponseReceived] = useState(false);\n  const [responseData, setResponseData] = useState<any>(null);\n  const [requestId, setRequestId] = useState<string | null>(null);\n  const [pollCount, setPollCount] = useState(0);\n  const [waitingTime, setWaitingTime] = useState(0);\n  const [showJsonResponse, setShowJsonResponse] = useState(false);\n  const [totalElapsedTime, setTotalElapsedTime] = useState(0);\n  const [startTime, setStartTime] = useState<Date | null>(null);\n  const [endTime, setEndTime] = useState<Date | null>(null);\n  const { toast } = useToast();\n\n  // Timer effect to track waiting time\n  useEffect(() => {\n    let interval: NodeJS.Timeout;\n    if (isWaiting) {\n      interval = setInterval(() => {\n        setWaitingTime(prev => prev + 1);\n      }, 1000);\n    } else {\n      setWaitingTime(0);\n    }\n    return () => {\n      if (interval) clearInterval(interval);\n    };\n  }, [isWaiting]);\n\n  // Format time display\n  const formatWaitTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  \n\n  // Excel download functions\n  const downloadExcelReport = () => {\n    if (!responseData) return;\n\n    const workbook = XLSX.utils.book_new();\n\n    // Summary Tab - Residual Value Analysis\n    const summaryData = processResidualValueData(responseData);\n    const summaryWS = XLSX.utils.json_to_sheet(summaryData);\n    XLSX.utils.book_append_sheet(workbook, summaryWS, \"Summary\");\n\n    // Inflation Tab\n    const inflationData = processInflationData(responseData);\n    const inflationWS = XLSX.utils.json_to_sheet(inflationData);\n    XLSX.utils.book_append_sheet(workbook, inflationWS, \"Inflation\");\n\n    // Depreciation Tab\n    const depreciationData = processDepreciationData(responseData);\n    const depreciationWS = XLSX.utils.json_to_sheet(depreciationData);\n    XLSX.utils.book_append_sheet(workbook, depreciationWS, \"Depreciation\");\n\n    // Utilization Tab\n    const utilizationData = processUtilizationData(responseData);\n    const utilizationWS = XLSX.utils.json_to_sheet(utilizationData);\n    XLSX.utils.book_append_sheet(workbook, utilizationWS, \"Utilization\");\n\n    // Market Data Tab\n    const marketData = processMarketData(responseData);\n    const marketWS = XLSX.utils.json_to_sheet(marketData);\n    XLSX.utils.book_append_sheet(workbook, marketWS, \"Market Data\");\n\n    // Overview Tab\n    const overviewData = [\n      {\n        'Data Source': 'Inflation Data',\n        'Status': 'Available',\n        'Description': 'Consumer Price Index and inflation impact analysis'\n      },\n      {\n        'Data Source': 'Utilization Data', \n        'Status': 'Available',\n        'Description': 'Equipment utilization hours vs current market pricing analysis'\n      },\n      {\n        'Data Source': 'Depreciation Data',\n        'Status': 'Available', \n        'Description': 'MACRS depreciation schedules and financial projections'\n      },\n      {\n        'Data Source': 'OEC Residual Data',\n        'Status': 'Available',\n        'Description': 'Original Equipment Cost and residual value projections'\n      },\n      {\n        'Data Source': 'Market Comps Data',\n        'Status': 'Available',\n        'Description': 'Comparable equipment market analysis and pricing data'\n      },\n      {\n        'Data Source': 'Executive Summary',\n        'Status': 'Available',\n        'Description': 'Executive summary with key findings and recommendations'\n      }\n    ];\n    const overviewWS = XLSX.utils.json_to_sheet(overviewData);\n    XLSX.utils.book_append_sheet(workbook, overviewWS, \"Overview\");\n\n    // Generate and download Excel file with BanfieldResidualCalcs format\n    const excelBuffer = XLSX.write(workbook, { bookType: 'xlsx', type: 'array' });\n    const blob = new Blob([excelBuffer], { type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet' });\n    \n    // Create filename with BanfieldResidualCalcs_DATETIME format\n    const now = new Date();\n    const datetime = now.toISOString().replace(/[-T:]/g, '').split('.')[0]; // Format: YYYYMMDDHHMMSS\n    const fileName = `BanfieldResidualCalcs_${datetime}.xlsx`;\n    saveAs(blob, fileName);\n\n    toast({\n      title: \"Excel Report Downloaded\",\n      description: \"Complete residual analysis report has been saved as an Excel file.\",\n    });\n  };\n\n  // PDF download function - Screenshots all 6 tabs\n  const downloadPDFReport = async () => {\n    if (!responseData) return;\n\n    try {\n      toast({\n        title: \"Generating PDF Report\",\n        description: \"Capturing all dashboard tabs and creating comprehensive PDF report...\",\n      });\n\n      const pdf = new jsPDF('p', 'mm', 'a4');\n      const pageWidth = pdf.internal.pageSize.getWidth();\n      const pageHeight = pdf.internal.pageSize.getHeight();\n      const margin = 20;\n      let yPosition = margin;\n\n      // Add title page\n      pdf.setFontSize(20);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('Residual Value Analysis Report', margin, yPosition);\n      yPosition += 15;\n\n      pdf.setFontSize(12);\n      pdf.setFont('helvetica', 'normal');\n      const equipmentName = responseData?.equipment_analysis?.equipment_name || \n                           responseData?.data_sources?.executive_summary?.data?.equipment_name ||\n                           form.getValues().itemDescription ||\n                           'N/A';\n      pdf.text(`Equipment: ${equipmentName}`, margin, yPosition);\n      yPosition += 7;\n      pdf.text(`Analysis Date: ${responseData?.equipment_analysis?.analysis_date || new Date().toLocaleDateString()}`, margin, yPosition);\n      yPosition += 7;\n      pdf.text(`Initial Cost: ${formatCurrency(responseData?.equipment_analysis?.initial_cost || 0)}`, margin, yPosition);\n      yPosition += 7;\n      const processingTime = totalElapsedTime > 0 ? formatWaitTime(totalElapsedTime) : \n                         (startTime && endTime) ? formatWaitTime(Math.floor((endTime.getTime() - startTime.getTime()) / 1000)) : \n                         'N/A';\n      pdf.text(`Processing Time: ${processingTime}`, margin, yPosition);\n      yPosition += 7;\n      pdf.text(`Report Generated: ${new Date().toLocaleString()}`, margin, yPosition);\n\n      // Tab titles for screenshots\n      const tabTitles = ['Summary', 'Inflation', 'Depreciation', 'Utilization', 'Market Data', 'Overview'];\n      const tabButtons = document.querySelectorAll('[role=\"tab\"]');\n      \n      // Screenshot each tab\n      for (let i = 0; i < tabTitles.length && i < tabButtons.length; i++) {\n        const tabTitle = tabTitles[i];\n        const tabButton = tabButtons[i] as HTMLElement;\n        \n        // Click the tab to make it active\n        tabButton.click();\n        \n        // Wait longer for content and plots to fully render (2 seconds per section)\n        await new Promise(resolve => setTimeout(resolve, 2000));\n        \n        // Additional wait for charts to fully render (check for Recharts components)\n        const hasCharts = document.querySelector('.recharts-wrapper');\n        if (hasCharts) {\n          console.log(`Waiting extra time for charts in ${tabTitle} tab...`);\n          await new Promise(resolve => setTimeout(resolve, 1000));\n        }\n        \n        // Find the active tab content\n        const activeTabContent = document.querySelector('[role=\"tabpanel\"]:not([hidden])');\n        \n        if (activeTabContent) {\n          // Add new page for each tab (except first)\n          if (i > 0) {\n            pdf.addPage();\n          } else {\n            pdf.addPage(); // Add page after title page\n          }\n          \n          // Add tab title\n          pdf.setFontSize(16);\n          pdf.setFont('helvetica', 'bold');\n          pdf.text(`${tabTitle} Analysis`, margin, 20);\n          \n          try {\n            // Capture screenshot of the tab content\n            const canvas = await html2canvas(activeTabContent as HTMLElement, {\n              scale: 2, // Higher quality\n              useCORS: true,\n              allowTaint: true,\n              backgroundColor: '#ffffff',\n              width: activeTabContent.scrollWidth,\n              height: activeTabContent.scrollHeight,\n              logging: false\n            });\n            \n            // Calculate dimensions to fit on PDF page\n            const imgWidth = pageWidth - 2 * margin;\n            const imgHeight = (canvas.height * imgWidth) / canvas.width;\n            \n            // Check if image fits on one page\n            if (imgHeight <= pageHeight - 40) {\n              // Fits on one page\n              const imgData = canvas.toDataURL('image/png');\n              pdf.addImage(imgData, 'PNG', margin, 30, imgWidth, imgHeight);\n            } else {\n              // Split across multiple pages\n              const maxImgHeight = pageHeight - 40;\n              const scaleFactor = maxImgHeight / imgHeight;\n              const scaledWidth = imgWidth * scaleFactor;\n              const scaledHeight = maxImgHeight;\n              \n              const imgData = canvas.toDataURL('image/png');\n              pdf.addImage(imgData, 'PNG', margin, 30, scaledWidth, scaledHeight);\n              \n              // If content is very tall, add note about scaling\n              if (scaleFactor < 0.8) {\n                pdf.addPage();\n                pdf.setFontSize(10);\n                pdf.setFont('helvetica', 'italic');\n                pdf.text('(Content scaled to fit page - full resolution available in digital dashboard)', margin, 20);\n              }\n            }\n          } catch (screenshotError) {\n            console.error(`Error capturing ${tabTitle} tab:`, screenshotError);\n            \n            // Fallback: Add text content instead of screenshot\n            pdf.setFontSize(10);\n            pdf.setFont('helvetica', 'normal');\n            pdf.text(`Screenshot capture failed for ${tabTitle} tab.`, margin, 35);\n            pdf.text('Please view the interactive dashboard for complete visualizations.', margin, 45);\n          }\n        }\n      }\n\n      // Add final summary page\n      pdf.addPage();\n      pdf.setFontSize(16);\n      pdf.setFont('helvetica', 'bold');\n      pdf.text('Report Summary', margin, 20);\n      \n      pdf.setFontSize(10);\n      pdf.setFont('helvetica', 'normal');\n      pdf.text('This comprehensive residual value analysis includes:', margin, 35);\n      pdf.text('â€¢ Executive summary with key insights and recommendations', margin, 45);\n      pdf.text('â€¢ Detailed residual value projections over 10-year term', margin, 55);\n      pdf.text('â€¢ Inflation impact analysis with historical CPI data', margin, 65);\n      pdf.text('â€¢ Multi-method depreciation analysis (Straight-line, MACRS, etc.)', margin, 75);\n      pdf.text('â€¢ Equipment utilization vs. market value correlations', margin, 85);\n      pdf.text('â€¢ Current market comparisons with pricing data', margin, 95);\n      pdf.text('â€¢ Complete processing and data quality metrics', margin, 105);\n      \n      pdf.setFontSize(8);\n      pdf.setFont('helvetica', 'italic');\n      pdf.text('Generated by AMI International Residual Analysis System', margin, pageHeight - 20);\n\n      // Save PDF\n      const fileName = `residual-analysis-report-${equipmentName.replace(/[^a-zA-Z0-9]/g, '-')}-${Date.now()}.pdf`;\n      pdf.save(fileName);\n\n      toast({\n        title: \"PDF Report Generated\",\n        description: \"Complete visual PDF report with all 6 dashboard sections has been downloaded.\",\n      });\n\n    } catch (error) {\n      console.error('Error generating PDF:', error);\n      toast({\n        title: \"PDF Generation Failed\",\n        description: \"There was an error generating the PDF report. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  // Function to process residual value data with fixed term months\n  const processResidualValueData = (data: any) => {\n    try {\n      // Use the same data processing as the chart display\n      const chartData = processExecutiveSummaryChart(data);\n      \n      return chartData.map((item: any, index: number) => ({\n        'Term Month': (index + 1) * 12,\n        'Residual % (High)': `${item.residualPercent}%`,\n        'Residual % (Low)': `${item.residualPercentLow}%`,\n        'Residual Value (High)': formatCurrency(item.residualValue),\n        'Residual Value (Low)': formatCurrency(item.residualValueLow),\n        'Average Residual %': `${((item.residualPercent + item.residualPercentLow) / 2).toFixed(1)}%`,\n        'Average Residual Value': formatCurrency((item.residualValue + item.residualValueLow) / 2)\n      }));\n    } catch (error) {\n      console.error('Error processing residual value data:', error);\n      return [];\n    }\n  };\n\n  // Helper functions to process n8n response data\n  const processInflationData = (data: any) => {\n    try {\n      const inflationData = data?.data_sources?.inflation_analysis?.data?.inflation_data?.yearly || [];\n      return inflationData.map((item: any) => ({\n        year: item.year,\n        cpi: parseFloat(item.cpi_u || 0),\n        rate: parseFloat(item.annual_rate || 0)\n      })).slice(-10); // Last 10 years\n    } catch (error) {\n      return [];\n    }\n  };\n\n  const processDepreciationData = (data: any) => {\n    try {\n      // Get the depreciation data from the correct location\n      let depData = data?.data_sources?.depreciation_analysis?.data;\n      \n      if (!depData) return [];\n      \n      console.log('Raw depreciation data:', depData);\n      \n      // Parse if it's a string\n      if (typeof depData === 'string') {\n        try {\n          const parsed = JSON.parse(depData);\n          depData = parsed;\n        } catch (parseError) {\n          console.error('Failed to parse depreciation data:', parseError);\n          return [];\n        }\n      }\n      \n      // Look for depreciation_calculations structure\n      const depCalcs = depData?.depreciation_calculations;\n      if (depCalcs && depCalcs.years) {\n        const years = depCalcs.years || [];\n        const straightLine = depCalcs.straight_line || [];\n        const doubleDecline = depCalcs.double_declining || [];\n        const sumYears = depCalcs.sum_of_years_digits || [];\n        const macrs = depCalcs.macrs || [];\n        \n        console.log('Depreciation arrays:', {\n          years: years.length,\n          straightLine: straightLine.length,\n          doubleDecline: doubleDecline.length,\n          sumYears: sumYears.length,\n          macrs: macrs.length\n        });\n        \n        // Create data points for each year\n        return years.map((year: number, index: number) => ({\n          year: `Year ${year}`,\n          straightLine: parseFloat(String(straightLine[index] || '0')),\n          doubleDeclining: parseFloat(String(doubleDecline[index] || '0')),\n          sumOfYears: parseFloat(String(sumYears[index] || '0')),\n          macrs: parseFloat(String(macrs[index] || '0'))\n        }));\n      }\n      \n      // Look for chart_config structure as backup\n      const chartConfig = depData?.chart_config?.data?.datasets;\n      if (chartConfig && Array.isArray(chartConfig)) {\n        const straightLineDataset = chartConfig.find(ds => ds.label === \"Straight-Line Method\");\n        const doubleDeclineDataset = chartConfig.find(ds => ds.label === \"Double Declining Balance\");\n        const sumYearsDataset = chartConfig.find(ds => ds.label === \"Sum-of-Years-Digits\");\n        const macrsDataset = chartConfig.find(ds => ds.label === \"MACRS\");\n        \n        if (straightLineDataset && straightLineDataset.data) {\n          const years = depData.chart_config.data.labels || [];\n          return straightLineDataset.data.map((value: number, index: number) => ({\n            year: years[index] || `Year ${index}`,\n            straightLine: parseFloat(String(straightLineDataset.data[index] || '0')),\n            doubleDeclining: parseFloat(String(doubleDeclineDataset?.data[index] || '0')),\n            sumOfYears: parseFloat(String(sumYearsDataset?.data[index] || '0')),\n            macrs: parseFloat(String(macrsDataset?.data[index] || '0'))\n          }));\n        }\n      }\n      \n      console.log('No valid depreciation data structure found');\n      return [];\n    } catch (error) {\n      console.error('Error processing depreciation data:', error);\n      return [];\n    }\n  };\n\n  const processMarketData = (data: any) => {\n    try {\n      console.log('Processing market comparisons data:', data?.data_sources?.market_comparisons?.data);\n      \n      // Look for market_comps array within the data\n      let marketData = data?.data_sources?.market_comparisons?.data;\n      \n      // If it's an array with market_comps inside\n      if (Array.isArray(marketData) && marketData[0]?.market_comps) {\n        marketData = marketData[0].market_comps;\n      }\n      // Or if it's directly the market_comps array\n      else if (marketData?.market_comps) {\n        marketData = marketData.market_comps;\n      }\n      // Fallback to other possible structures\n      else if (!Array.isArray(marketData)) {\n        marketData = marketData?.market_data || [];\n      }\n      \n      if (Array.isArray(marketData)) {\n        console.log('Found market data array with', marketData.length, 'items');\n        \n        return marketData.map((item: any, index: number) => ({\n          id: index + 1,\n          year: parseInt(item.year) || 2024,\n          hours: parseInt(item.hours?.replace(/,/g, '') || '0'),\n          hoursText: item.hours?.replace(/,/g, '') || '0',\n          priceValue: parseInt(item.price?.replace(/[^\\d]/g, '') || '0'),\n          price: item.price || '$0',\n          description: item.item_description || item.description || 'Unknown Equipment',\n          serialNumber: item.serial_number || 'N/A',\n          dealer: item.dealer || 'N/A',\n          location: item.seller_location || item.location || 'N/A',\n          phone: item.phone || 'N/A',\n          url: item.url_to_listing || null\n        }));\n      }\n      return [];\n    } catch (error) {\n      console.error('Error processing market data:', error);\n      return [];\n    }\n  };\n\n  const processUtilizationData = (data: any) => {\n    try {\n      console.log('Processing utilization data from OEC residual analysis');\n      \n      // Look for OEC residual analysis data which contains utilization information\n      let oecData = data?.data_sources?.oec_residual_analysis?.data;\n      \n      if (!oecData) {\n        console.log('No OEC data found, trying other sources');\n        // Fallback to utilization_vs_price data\n        let utilizationData = data?.data_sources?.utilization_vs_price?.data || [];\n        \n        if (typeof utilizationData === 'string') {\n          try {\n            utilizationData = JSON.parse(utilizationData.replace(/\\\\n/g, '').replace(/\\s+/g, ' '));\n          } catch (parseError) {\n            console.error('Failed to parse utilization JSON:', parseError);\n            return [];\n          }\n        }\n        \n        if (Array.isArray(utilizationData)) {\n          return utilizationData.slice(0, 11).map((item: any, index: number) => ({\n            id: index + 1,\n            hoursPerYear: parseInt(item.hours_year || item['Hours/Year'] || item.hours_per_year || '0'),\n            residualPercent: parseFloat(item.resid_percent || item['Resid %'] || item.residual_percent || '0'),\n            residualValue: parseInt(String(item.resid_value || item['Resid Lo$'] || item.residual_value || '0').replace(/[^\\d]/g, '')),\n            effectiveAge: parseFloat(item.effective_age || item['Effective Age'] || item.age || '0')\n          }));\n        }\n        return [];\n      }\n      \n      // Parse OEC data if it's a string\n      if (typeof oecData === 'string') {\n        try {\n          oecData = JSON.parse(oecData);\n        } catch (parseError) {\n          console.error('Failed to parse OEC data:', parseError);\n          return [];\n        }\n      }\n      \n      // Process OEC residual analysis data\n      if (Array.isArray(oecData) && oecData.length > 0) {\n        console.log('Found OEC data array with', oecData.length, 'items');\n        \n        return oecData.map((item: any, index: number) => ({\n          id: index + 1,\n          hoursTotal: parseFloat(String(item['Hours - total'] || item.hours_total || '0')),\n          hoursPerYear: parseFloat(String(item['Hours - per year'] || item.hours_per_year || '0')),\n          residualPercent: parseFloat(String(item.Resid || item['Resid'] || item.residual_percent || '0').replace('%', '')),\n          residualValue: parseInt(String(item['Current Price'] || item.current_price || item.residual_value || '0').replace(/[^\\d]/g, '')),\n          effectiveAge: parseFloat(String(item['Effective Age'] || item.effective_age || item.age || '0')),\n          make: item.Make || item.make || '',\n          model: item.Model || item.model || '',\n          year: parseInt(String(item['Year model'] || item.year || '0'))\n        }));\n      }\n      \n      return [];\n    } catch (error) {\n      console.error('Error processing utilization data:', error);\n      return [];\n    }\n  };\n\n  const processExecutiveSummaryChart = (data: any) => {\n    try {\n      // Look for asset management table in executive summary\n      const execSummary = data?.data_sources?.executive_summary?.data;\n      let assetTable = null;\n      \n      // Parse executive summary if it's a string\n      if (typeof execSummary === 'string') {\n        try {\n          const parsed = JSON.parse(execSummary);\n          assetTable = parsed?.executive_summary?.asset_management_table || parsed?.asset_management_table;\n        } catch (parseError) {\n          console.error('Failed to parse executive summary:', parseError);\n        }\n      } else {\n        assetTable = execSummary?.executive_summary?.asset_management_table || execSummary?.asset_management_table;\n      }\n      \n      if (assetTable && assetTable.resid_hi_percent && assetTable.resid_lo_percent) {\n        const periodLabels = assetTable.period_labels || [];\n        const residHiPercent = assetTable.resid_hi_percent || [];\n        const residLoPercent = assetTable.resid_lo_percent || [];\n        const residHiDollar = assetTable.resid_hi_dollar || [];\n        const residLoDollar = assetTable.resid_lo_dollar || [];\n        \n        // Create data points for each period (should be 10 points)\n        return periodLabels.slice(0, 10).map((period: string, index: number) => {\n          const monthMatch = period.match(/(\\d+)\\s*months?/);\n          const months = monthMatch ? parseInt(monthMatch[1]) : (index + 1) * 12;\n          \n          return {\n            months: months,\n            residualPercent: parseFloat(residHiPercent[index] || '0'), // Use high percent as primary\n            residualValue: parseInt(String(residHiDollar[index] || '0').replace(/[^\\d]/g, '')), // Use high dollar as primary\n            residualPercentLow: parseFloat(residLoPercent[index] || '0'),\n            residualValueLow: parseInt(String(residLoDollar[index] || '0').replace(/[^\\d]/g, '')),\n            effectiveAge: months / 12 // Age in years\n          };\n        });\n      }\n      \n      // Fallback to OEC data\n      const oecData = data?.data_sources?.oec_residual_analysis?.data;\n      if (Array.isArray(oecData) && oecData.length > 0) {\n        return oecData.slice(0, 10).map((item: any, index: number) => ({\n          months: (index + 1) * 12,\n          residualPercent: parseFloat(item.resid_percent || item['Resid %'] || item.residual_percent || '0'),\n          residualValue: parseInt(String(item.resid_value || item['Resid Lo$'] || item.residual_value || '0').replace(/[^\\d]/g, '')),\n          effectiveAge: parseFloat(item.effective_age || item['Effective Age'] || item.age || '0')\n        }));\n      }\n      \n      // Final fallback - generate sample data\n      const months = [12, 24, 36, 48, 60, 72, 84, 96, 108, 120];\n      return months.map((month, index) => ({\n        months: month,\n        residualPercent: Math.max(85 - (index * 8), 25),\n        residualValue: Math.max(430000 - (index * 35000), 125000),\n        effectiveAge: (month / 12)\n      }));\n    } catch (error) {\n      console.error('Error processing executive summary chart:', error);\n      return [];\n    }\n  };\n\n  const getExecutiveSummary = (data: any) => {\n    try {\n      const summary = data?.data_sources?.executive_summary?.data;\n      if (typeof summary === 'string') {\n        const parsed = JSON.parse(summary);\n        return parsed.executive_summary || parsed;\n      }\n      return summary?.executive_summary || summary || {};\n    } catch (error) {\n      return {};\n    }\n  };\n\n  const formatCurrency = (value: number) => {\n    return new Intl.NumberFormat('en-US', {\n      style: 'currency',\n      currency: 'USD',\n      minimumFractionDigits: 0,\n      maximumFractionDigits: 0,\n    }).format(value);\n  };\n\n  // Polling function to check for async results\n  const pollForResult = async (id: string) => {\n    let attempts = 0;\n    const maxAttempts = 120; // Poll for up to 10 minutes (5s intervals)\n    \n    const poll = async () => {\n      attempts++;\n      setPollCount(attempts);\n      \n      try {\n        const response = await fetch(`/api/webhook-status/${id}`);\n        const result = await response.json();\n        \n        console.log(`Poll attempt ${attempts}:`, result);\n        \n        if (result.status === 'completed') {\n          const pollEndTime = new Date();\n          const totalTime = startTime ? Math.floor((pollEndTime.getTime() - startTime.getTime()) / 1000) : 0;\n          setEndTime(pollEndTime);\n          setTotalElapsedTime(totalTime);\n          setIsWaiting(false);\n          setResponseData(result.result);\n          setResponseReceived(true);\n          \n          toast({\n            title: \"Success!\",\n            description: \"Your request has been processed successfully.\",\n          });\n          return;\n        }\n        \n        if (attempts < maxAttempts) {\n          setTimeout(poll, 5000); // Poll every 5 seconds\n        } else {\n          setIsWaiting(false);\n          setResponseData({\n            error: true,\n            errorType: 'Polling Timeout',\n            errorMessage: 'Request is still processing after 10 minutes',\n            suggestion: 'Your request may still be processing in the background'\n          });\n          setResponseReceived(true);\n          \n          toast({\n            title: \"Timeout\",\n            description: \"Request is taking longer than expected (10+ minutes) but may still be processing.\",\n            variant: \"destructive\",\n          });\n        }\n      } catch (error: any) {\n        console.error('Polling error:', error);\n        setIsWaiting(false);\n        setResponseData({\n          error: true,\n          errorType: 'Polling Error',\n          errorMessage: error.message,\n        });\n        setResponseReceived(true);\n        \n        toast({\n          title: \"Error\",\n          description: \"Failed to check request status.\",\n          variant: \"destructive\",\n        });\n      }\n    };\n    \n    poll();\n  };\n\n  const resetForm = () => {\n    setIsSubmitting(false);\n    setIsWaiting(false);\n    setResponseReceived(false);\n    setResponseData(null);\n    setRequestId(null);\n    setPollCount(0);\n    setWaitingTime(0);\n    setTotalElapsedTime(0);\n    setStartTime(null);\n    setEndTime(null);\n    form.reset({\n      lesseeName: \"\",\n      lesseeEmail: \"info@theendlessforms.com\",\n      source: \"\",\n      itemName: \"Volvo A30G Articulating Dump\",\n      make: \"Volvo\",\n      model: \"A30G\",\n      currentMeter: 0,\n      proposedMeter: 1250,\n      meterUnit: \"HPY\",\n      itemDescription: \"Volvo A30G Articulating Dump\",\n      subjectPrice: 507750,\n      industry: \"Construction\",\n      assetType: \"Construction Equipment\",\n      status: \"New\",\n      application: \"Construction, Rugged\",\n      structure: \"FMV\",\n      termMonths: 24,\n    });\n  };\n\n  const form = useForm<AssetFormData>({\n    resolver: zodResolver(assetFormSchema),\n    defaultValues: {\n      lesseeName: \"\",\n      lesseeEmail: \"info@theendlessforms.com\",\n      source: \"\",\n      itemName: \"Volvo A30G Articulating Dump\",\n      make: \"Volvo\",\n      model: \"A30G\",\n      currentMeter: 0,\n      proposedMeter: 1250,\n      meterUnit: \"HPY\",\n      itemDescription: \"Volvo A30G Articulating Dump\",\n      subjectPrice: 507750,\n      industry: \"Construction\",\n      assetType: \"Construction Equipment\",\n      status: \"New\",\n      application: \"Construction, Rugged\",\n      structure: \"FMV\",\n      termMonths: 24,\n    },\n  });\n\n  const onSubmit = async (data: AssetFormData) => {\n    setIsSubmitting(true);\n    setIsWaiting(true);\n    setResponseReceived(false);\n    setResponseData(null);\n    setWaitingTime(0);\n    setTotalElapsedTime(0);\n    const submitStartTime = new Date();\n    setStartTime(submitStartTime);\n    setEndTime(null);\n    \n    try {\n      const proxyUrl = '/api/webhook-proxy';\n      \n      // Add timestamp for n8n callback URL generation\n      const timestamp = Date.now();\n      const dataWithTimestamp = { ...data, timestamp };\n      \n      console.log('Submitting to webhook via server proxy:', proxyUrl);\n      console.log('Form data:', dataWithTimestamp);\n      \n      toast({\n        title: \"Request Sent!\",\n        description: \"Processing your request...\",\n      });\n      \n      // Use our server proxy endpoint (no CORS issues)\n      const response = await fetch(proxyUrl, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(dataWithTimestamp)\n      });\n      \n      let responseJson;\n      \n      // First, get the response text to avoid \"Response body already used\" error\n      const responseText = await response.text();\n      \n      try {\n        responseJson = JSON.parse(responseText);\n      } catch (e) {\n        // If response is not JSON, return as object with status info\n        responseJson = { \n          status: response.status,\n          statusText: response.statusText,\n          text: responseText,\n          error: true,\n          errorType: \"ParseError\",\n          errorMessage: `Failed to parse response as JSON: ${(e as Error).message}`\n        };\n      }\n\n      console.log('Response received:', responseJson);\n\n      // Check if this is an async response with requestId\n      if (responseJson.requestId && responseJson.status === 'processing') {\n        setRequestId(responseJson.requestId);\n        console.log('Starting async polling for request:', responseJson.requestId);\n        \n        toast({\n          title: \"Processing Started!\",\n          description: \"Your request is being processed by our agents. This will take 6-8 minutes.\",\n        });\n        \n        // Start polling for the result\n        pollForResult(responseJson.requestId);\n        return;\n      }\n\n      // Handle direct successful response from n8n \"Respond to Webhook\" node\n      if (response.ok && responseJson && !responseJson.requestId && responseJson.status !== 524) {\n        console.log('Direct response from n8n \"Respond to Webhook\" node:', responseJson);\n        const submitEndTime = new Date();\n        const totalTime = Math.floor((submitEndTime.getTime() - submitStartTime.getTime()) / 1000);\n        setEndTime(submitEndTime);\n        setTotalElapsedTime(totalTime);\n        setResponseData(responseJson);\n        setResponseReceived(true);\n        setIsWaiting(false);\n        setIsSubmitting(false);\n        \n        toast({\n          title: \"Analysis Complete!\",\n          description: \"Your residual analysis has been completed successfully.\",\n        });\n        return;\n      }\n\n      // Handle other successful responses\n      if (response.ok && responseJson) {\n        console.log('Success! Response received:', responseJson);\n        \n        setResponseData(responseJson);\n        setResponseReceived(true);\n        setIsWaiting(false);\n        \n        toast({\n          title: \"Success!\",\n          description: \"Form submitted successfully to n8n webhook\",\n        });\n        return;\n      }\n      \n      // Handle 524 timeout - webhook received data, start async waiting\n      if (response.status === 524 || responseJson.status === 524) {\n        console.log('524 timeout - webhook received data, starting async wait for results');\n        \n        // Use the same timestamp that was sent to n8n for consistent tracking\n        const requestId = `${data.lesseeName}_${timestamp}`;\n        setRequestId(requestId);\n        \n        console.log('Waiting for results at callback:', `${window.location.origin}/api/webhook-callback/${requestId}`);\n        \n        // Continue waiting and polling for results\n        setIsWaiting(true);\n        setWaitingTime(100); // Start from 100 seconds (when 524 occurred)\n        \n        toast({\n          title: \"Analysis Started\",\n          description: \"Agents received your data and are formulating residual analysis...\",\n        });\n        \n        // Start polling for callback results\n        pollForResult(requestId);\n        return;\n      }\n\n      // Handle other errors\n      setResponseData(responseJson);\n      setResponseReceived(true);\n      setIsWaiting(false);\n      \n      toast({\n        title: \"Error Response\",\n        description: `Server returned status ${response.status}. Check the response below.`,\n        variant: \"destructive\",\n      });\n      \n    } catch (error: any) {\n      console.error('Submission error details:', {\n        name: error?.name,\n        message: error?.message,\n        stack: error?.stack,\n        error: error\n      });\n      setIsWaiting(false);\n      \n      let errorMessage = \"Network error. Please check your connection and try again.\";\n      \n      if (error?.message) {\n        errorMessage = `Network error: ${error.message}`;\n      }\n      \n      toast({\n        title: \"Error\",\n        description: errorMessage,\n        variant: \"destructive\",\n      });\n      \n      // Set error state for display\n      setResponseData({\n        error: true,\n        errorType: error?.name || 'Unknown',\n        errorMessage: error?.message || 'Unknown error occurred',\n        timestamp: new Date().toISOString()\n      });\n      setResponseReceived(true);\n      \n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-white\">\n      {/* Header */}\n      <header className=\"bg-white shadow-sm border-b border-gray-200\">\n        <div className=\"max-w-4xl mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-center\">\n            <img \n              src={amiLogoPath} \n              alt=\"AMI Management Logo\" \n              className=\"h-12 w-auto\"\n            />\n          </div>\n        </div>\n      </header>\n\n      {/* Main Content */}\n      <main className=\"max-w-4xl mx-auto px-4 py-8\">\n        <Card className=\"shadow-lg border border-gray-200\">\n          {/* Form Header */}\n          <CardHeader className=\"ami-red text-white\">\n            <CardTitle className=\"text-2xl font-bold\">\n              {isWaiting ? \"Formulating Residual Analysis...\" : \"Equipment Lease Information Form\"}\n            </CardTitle>\n            <p className=\"text-white/90 mt-1\">\n              {isWaiting ? \"Please wait while our agents analyze your asset data\" : \"Please fill out all required fields below\"}\n            </p>\n          </CardHeader>\n\n          {/* Form Content */}\n          <CardContent className=\"p-6\">\n            {/* Show waiting state */}\n            {isWaiting && (\n              <div className=\"text-center py-12\">\n                <Loader2 className=\"h-12 w-12 animate-spin text-red-500 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-semibold text-gray-900 mb-2\">Processing Your Request</h3>\n                <div className=\"text-2xl font-mono text-red-600 mb-2\">{formatWaitTime(waitingTime)}</div>\n                <p className=\"text-gray-600 mb-4\">\n                  {waitingTime < 60 ? \"Initializing agents...\" :\n                   waitingTime < 180 ? \"Agents are analyzing your asset data...\" :\n                   waitingTime < 300 ? \"Deep market analysis in progress...\" :\n                   waitingTime < 420 ? \"Processing depreciation schedules...\" :\n                   waitingTime < 480 ? \"Finalizing residual calculations...\" :\n                   \"Almost complete! Final processing steps...\"}\n                </p>\n                <div className=\"bg-gray-200 h-2 rounded-full max-w-md mx-auto\">\n                  <div \n                    className=\"bg-red-500 h-2 rounded-full transition-all duration-300\"\n                    style={{ width: `${Math.min((waitingTime / 480) * 100, 100)}%` }}\n                  />\n                </div>\n                <p className=\"text-sm text-gray-500 mt-4\">\n                  Expected processing time: 6-8 minutes\n                </p>\n              </div>\n            )}\n\n            {/* Show interactive dashboard if response received */}\n            {responseReceived && responseData && (\n              <div className=\"space-y-6\">\n                {/* Header */}\n                <div className=\"text-center py-6\">\n                  <CheckCircle className=\"h-12 w-12 text-green-500 mx-auto mb-4\" />\n                  <h3 className=\"text-2xl font-bold text-gray-900 mb-2\">Residual Analysis Complete</h3>\n                  <p className=\"text-gray-600\">\n                    {responseData?.equipment_analysis?.equipment_name || \"Equipment\"} Analysis Report\n                  </p>\n                </div>\n\n                {/* Key Metrics Cards */}\n                <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center\">\n                        <DollarSign className=\"h-8 w-8 text-green-600\" />\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm font-medium text-gray-600\">Initial Cost</p>\n                          <p className=\"text-lg font-bold text-gray-900\">\n                            {responseData?.equipment_analysis?.initial_cost || \"N/A\"}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center\">\n                        <TrendingUp className=\"h-8 w-8 text-blue-600\" />\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm font-medium text-gray-600\">Analysis Date</p>\n                          <p className=\"text-lg font-bold text-gray-900\">\n                            {responseData?.equipment_analysis?.analysis_date || \"N/A\"}\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center\">\n                        <BarChart3 className=\"h-8 w-8 text-red-600\" />\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm font-medium text-gray-600\">Data Sources</p>\n                          <p className=\"text-lg font-bold text-gray-900\">\n                            {responseData?.metadata?.total_data_sources || \"6\"} Sources\n                          </p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                  \n                  <Card>\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center\">\n                        <PieChart className=\"h-8 w-8 text-purple-600\" />\n                        <div className=\"ml-3\">\n                          <p className=\"text-sm font-medium text-gray-600\">Report Status</p>\n                          <p className=\"text-lg font-bold text-green-600\">Complete</p>\n                        </div>\n                      </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Interactive Charts Dashboard */}\n                <Tabs defaultValue=\"summary\" className=\"w-full\">\n                  <TabsList className=\"grid w-full grid-cols-6\">\n                    <TabsTrigger value=\"summary\">Summary</TabsTrigger>\n                    <TabsTrigger value=\"inflation\">Inflation</TabsTrigger>\n                    <TabsTrigger value=\"depreciation\">Depreciation</TabsTrigger>\n                    <TabsTrigger value=\"utilization\">Utilization</TabsTrigger>\n                    <TabsTrigger value=\"market\">Market Data</TabsTrigger>\n                    <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n                  </TabsList>\n\n                  {/* Executive Summary Tab - Now First */}\n                  <TabsContent value=\"summary\" className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <DollarSign className=\"mr-2 h-5 w-5\" />\n                          Residual Value Analysis\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <ChartContainer\n                          config={{\n                            residualPercent: {\n                              label: \"Residual % (High)\",\n                              color: \"#3b82f6\",\n                            },\n                            residualValue: {\n                              label: \"Residual Value $ (High)\",\n                              color: \"#ef4444\",\n                            },\n                            residualPercentLow: {\n                              label: \"Residual % (Low)\",\n                              color: \"#60a5fa\",\n                            },\n                            residualValueLow: {\n                              label: \"Residual Value $ (Low)\",\n                              color: \"#f87171\",\n                            },\n                          }}\n                          className=\"h-[400px]\"\n                        >\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={processExecutiveSummaryChart(responseData)}>\n                              <CartesianGrid strokeDasharray=\"3 3\" />\n                              <XAxis \n                                dataKey=\"months\" \n                                label={{ value: 'Months', position: 'insideBottom', offset: -10 }}\n                              />\n                              <YAxis \n                                yAxisId=\"left\"\n                                domain={[15, 95]}\n                                tick={{ fill: '#3b82f6' }}\n                                label={{ value: 'Residual %', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: '#3b82f6' } }}\n                              />\n                              <YAxis \n                                yAxisId=\"right\" \n                                orientation=\"right\"\n                                domain={[50000, 500000]}\n                                tick={{ fill: '#ef4444' }}\n                                tickFormatter={(value) => formatCurrency(value)}\n                                label={{ value: 'Residual Value ($)', angle: 90, position: 'insideRight', style: { textAnchor: 'middle', fill: '#ef4444' } }}\n                              />\n                              <ChartTooltip \n                                content={<ChartTooltipContent \n                                  formatter={(value, name) => {\n                                    if (String(name)?.includes(\"Percent\") || String(name)?.includes(\"%\")) {\n                                      return [`${value}%`, name];\n                                    }\n                                    return [formatCurrency(Number(value)), name];\n                                  }}\n                                />} \n                              />\n                              <ChartLegend content={<ChartLegendContent />} />\n                              <Line \n                                yAxisId=\"left\"\n                                type=\"monotone\" \n                                dataKey=\"residualPercent\" \n                                stroke=\"#3b82f6\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 5 }}\n                                connectNulls={true}\n                                name=\"Residual % (High)\"\n                              />\n                              <Line \n                                yAxisId=\"left\"\n                                type=\"monotone\" \n                                dataKey=\"residualPercentLow\" \n                                stroke=\"#60a5fa\" \n                                strokeWidth={2}\n                                strokeDasharray=\"5 5\"\n                                dot={{ fill: \"#60a5fa\", strokeWidth: 2, r: 4 }}\n                                connectNulls={true}\n                                name=\"Residual % (Low)\"\n                              />\n                              <Line \n                                yAxisId=\"right\"\n                                type=\"monotone\" \n                                dataKey=\"residualValue\" \n                                stroke=\"#ef4444\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#ef4444\", strokeWidth: 2, r: 5 }}\n                                connectNulls={true}\n                                name=\"Residual Value $ (High)\"\n                              />\n                              <Line \n                                yAxisId=\"right\"\n                                type=\"monotone\" \n                                dataKey=\"residualValueLow\" \n                                stroke=\"#f87171\" \n                                strokeWidth={2}\n                                strokeDasharray=\"5 5\"\n                                dot={{ fill: \"#f87171\", strokeWidth: 2, r: 4 }}\n                                connectNulls={true}\n                                name=\"Residual Value $ (Low)\"\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </ChartContainer>\n                        \n                        {/* Residual Value Analysis Table */}\n                        <div className=\"mt-6\">\n                          <h4 className=\"font-semibold text-gray-900 mb-4 flex items-center\">\n                            <Database className=\"mr-2 h-4 w-4\" />\n                            Residual Value Analysis Data Points\n                          </h4>\n                          <div className=\"overflow-x-auto\">\n                            <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                              <thead>\n                                <tr className=\"bg-gray-50\">\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Term Month</th>\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Residual % (High)</th>\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Residual % (Low)</th>\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Residual Value (High)</th>\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Residual Value (Low)</th>\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Average Residual %</th>\n                                  <th className=\"border border-gray-300 px-3 py-2 text-left\">Average Residual Value</th>\n                                </tr>\n                              </thead>\n                              <tbody>\n                                {processExecutiveSummaryChart(responseData).map((item: any, index: number) => (\n                                  <tr key={index} className={index % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"}>\n                                    <td className=\"border border-gray-300 px-3 py-2 font-semibold\">{(index + 1) * 12}</td>\n                                    <td className=\"border border-gray-300 px-3 py-2 font-semibold text-blue-600\">{item.residualPercent}%</td>\n                                    <td className=\"border border-gray-300 px-3 py-2 text-blue-500\">{item.residualPercentLow}%</td>\n                                    <td className=\"border border-gray-300 px-3 py-2 font-semibold text-red-600\">{formatCurrency(item.residualValue)}</td>\n                                    <td className=\"border border-gray-300 px-3 py-2 text-red-500\">{formatCurrency(item.residualValueLow)}</td>\n                                    <td className=\"border border-gray-300 px-3 py-2 font-medium text-purple-600\">\n                                      {((item.residualPercent + item.residualPercentLow) / 2).toFixed(1)}%\n                                    </td>\n                                    <td className=\"border border-gray-300 px-3 py-2 font-medium text-green-600\">\n                                      {formatCurrency((item.residualValue + item.residualValueLow) / 2)}\n                                    </td>\n                                  </tr>\n                                ))}\n                              </tbody>\n                            </table>\n                          </div>\n                        </div>\n                        \n                        {/* Executive Summary Text */}\n                        <div className=\"mt-6 space-y-4\">\n                          {(() => {\n                            const summary = getExecutiveSummary(responseData);\n                            return (\n                              <div className=\"space-y-4\">\n                                {summary.overview && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Overview</h4>\n                                    <p className=\"text-gray-700 leading-relaxed text-sm\">{summary.overview}</p>\n                                  </div>\n                                )}\n                                \n                                {summary.key_findings && Array.isArray(summary.key_findings) && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Key Findings</h4>\n                                    <ul className=\"list-disc list-inside space-y-1 text-gray-700 text-sm\">\n                                      {summary.key_findings.map((finding: string, index: number) => (\n                                        <li key={index} className=\"leading-relaxed\">{finding}</li>\n                                      ))}\n                                    </ul>\n                                  </div>\n                                )}\n\n                                {summary.market_conditions && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Market Conditions</h4>\n                                    <p className=\"text-gray-700 leading-relaxed text-sm\">{summary.market_conditions}</p>\n                                  </div>\n                                )}\n\n                                {summary.utilization_analysis && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Utilization Analysis</h4>\n                                    <p className=\"text-gray-700 leading-relaxed text-sm\">\n                                      {typeof summary.utilization_analysis === 'string' ? summary.utilization_analysis : JSON.stringify(summary.utilization_analysis)}\n                                    </p>\n                                    {summary.current_utilization && (\n                                      <p className=\"text-gray-600 leading-relaxed text-sm mt-1\">\n                                        <strong>Current Utilization:</strong> {typeof summary.current_utilization === 'string' ? summary.current_utilization : JSON.stringify(summary.current_utilization)}\n                                      </p>\n                                    )}\n                                    {summary.efficiency_rating && (\n                                      <p className=\"text-gray-600 leading-relaxed text-sm mt-1\">\n                                        <strong>Efficiency Rating:</strong> {typeof summary.efficiency_rating === 'string' ? summary.efficiency_rating : JSON.stringify(summary.efficiency_rating)}\n                                      </p>\n                                    )}\n                                  </div>\n                                )}\n\n                                {summary.optimization_opportunities && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Optimization Opportunities</h4>\n                                    <p className=\"text-gray-700 leading-relaxed text-sm\">\n                                      {typeof summary.optimization_opportunities === 'string' ? summary.optimization_opportunities : JSON.stringify(summary.optimization_opportunities)}\n                                    </p>\n                                  </div>\n                                )}\n\n                                {summary.recommendations && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Recommendations</h4>\n                                    <p className=\"text-gray-700 leading-relaxed text-sm\">\n                                      {typeof summary.recommendations === 'string' ? summary.recommendations : JSON.stringify(summary.recommendations)}\n                                    </p>\n                                  </div>\n                                )}\n\n                                {summary.next_steps && (\n                                  <div>\n                                    <h4 className=\"font-semibold text-gray-900 mb-2\">Next Steps</h4>\n                                    <p className=\"text-gray-700 leading-relaxed text-sm\">\n                                      {typeof summary.next_steps === 'string' ? summary.next_steps : JSON.stringify(summary.next_steps)}\n                                    </p>\n                                  </div>\n                                )}\n                              </div>\n                            );\n                          })()}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  {/* Overview Tab */}\n                  <TabsContent value=\"overview\" className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <BarChart3 className=\"mr-2 h-5 w-5\" />\n                          Equipment Analysis Overview\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900 mb-3\">Data Quality Status</h4>\n                            <div className=\"space-y-2\">\n                              {responseData?.metadata?.data_quality && Object.entries(responseData.metadata.data_quality).map(([key, available]) => (\n                                <div key={key} className=\"flex items-center justify-between\">\n                                  <span className=\"text-sm text-gray-600 capitalize\">\n                                    {key.replace(/_/g, ' ').replace('available', '')}\n                                  </span>\n                                  <span className={`text-sm font-medium ${available ? 'text-green-600' : 'text-red-600'}`}>\n                                    {available ? 'âœ“ Available' : 'âœ— Unavailable'}\n                                  </span>\n                                </div>\n                              ))}\n                            </div>\n                          </div>\n                          <div>\n                            <h4 className=\"font-semibold text-gray-900 mb-3\">Processing Details</h4>\n                            <div className=\"space-y-2\">\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600\">Start Time</span>\n                                <span className=\"text-sm font-medium\">\n                                  {startTime ? startTime.toLocaleTimeString() : 'N/A'}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600\">End Time</span>\n                                <span className=\"text-sm font-medium\">\n                                  {endTime ? endTime.toLocaleTimeString() : 'N/A'}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600\">Total Duration</span>\n                                <span className=\"text-sm font-medium\">\n                                  {totalElapsedTime > 0 ? formatWaitTime(totalElapsedTime) : \n                                   (startTime && endTime) ? formatWaitTime(Math.floor((endTime.getTime() - startTime.getTime()) / 1000)) : \n                                   waitingTime > 0 ? formatWaitTime(waitingTime) : 'N/A'}\n                                </span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600\">Total Data Sources</span>\n                                <span className=\"text-sm font-medium\">{responseData?.metadata?.total_data_sources || 'N/A'}</span>\n                              </div>\n                              <div className=\"flex justify-between\">\n                                <span className=\"text-sm text-gray-600\">Analysis Status</span>\n                                <span className=\"text-sm font-medium text-green-600\">Complete</span>\n                              </div>\n                            </div>\n                          </div>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  {/* Inflation Analysis Tab */}\n                  <TabsContent value=\"inflation\" className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <TrendingUp className=\"mr-2 h-5 w-5\" />\n                          Inflation Analysis (Last 10 Years)\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <ChartContainer\n                          config={{\n                            rate: {\n                              label: \"Inflation Rate (%)\",\n                              color: \"hsl(var(--chart-1))\",\n                            },\n                            cpi: {\n                              label: \"Consumer Price Index\",\n                              color: \"hsl(var(--chart-2))\",\n                            },\n                          }}\n                          className=\"h-[400px]\"\n                        >\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={processInflationData(responseData)}>\n                              <CartesianGrid strokeDasharray=\"3 3\" />\n                              <XAxis dataKey=\"year\" />\n                              <YAxis yAxisId=\"left\" />\n                              <YAxis yAxisId=\"right\" orientation=\"right\" />\n                              <ChartTooltip content={<ChartTooltipContent />} />\n                              <ChartLegend \n                                content={<ChartLegendContent />} \n                                layout=\"horizontal\"\n                                align=\"left\"\n                                verticalAlign=\"top\"\n                                wrapperStyle={{ paddingLeft: '20px', paddingTop: '10px' }}\n                              />\n                              <Line \n                                yAxisId=\"left\"\n                                type=\"monotone\" \n                                dataKey=\"rate\" \n                                stroke=\"#ef4444\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#ef4444\", strokeWidth: 2, r: 5 }}\n                                connectNulls={true}\n                                name=\"Annual Rate (%)\"\n                              />\n                              <Line \n                                yAxisId=\"right\"\n                                type=\"monotone\" \n                                dataKey=\"cpi\" \n                                stroke=\"#3b82f6\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 5 }}\n                                connectNulls={true}\n                                name=\"CPI-U\"\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </ChartContainer>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  {/* Depreciation Analysis Tab */}\n                  <TabsContent value=\"depreciation\" className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <BarChart3 className=\"mr-2 h-5 w-5\" />\n                          Depreciation Methods Comparison\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <ChartContainer\n                          config={{\n                            straightLine: {\n                              label: \"Straight-Line Method\",\n                              color: \"#3b82f6\",\n                            },\n                            doubleDeclining: {\n                              label: \"Double Declining Balance\", \n                              color: \"#ef4444\",\n                            },\n                            sumOfYears: {\n                              label: \"Sum-of-Years-Digits\",\n                              color: \"#22c55e\", \n                            },\n                            macrs: {\n                              label: \"MACRS\",\n                              color: \"#f59e0b\",\n                            },\n                          }}\n                          className=\"h-[400px]\"\n                        >\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={processDepreciationData(responseData)}>\n                              <CartesianGrid strokeDasharray=\"3 3\" />\n                              <XAxis dataKey=\"year\" />\n                              <YAxis tickFormatter={(value) => formatCurrency(value)} />\n                              <ChartTooltip \n                                content={<ChartTooltipContent \n                                  formatter={(value) => [formatCurrency(Number(value)), \"\"]}\n                                />} \n                              />\n                              <ChartLegend content={<ChartLegendContent />} />\n                              <Line \n                                type=\"monotone\" \n                                dataKey=\"straightLine\" \n                                stroke=\"#3b82f6\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 4 }}\n                                connectNulls={true}\n                                name=\"Straight-Line Method\"\n                              />\n                              <Line \n                                type=\"monotone\" \n                                dataKey=\"doubleDeclining\" \n                                stroke=\"#ef4444\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#ef4444\", strokeWidth: 2, r: 4 }}\n                                connectNulls={true}\n                                name=\"Double Declining Balance\"\n                              />\n                              <Line \n                                type=\"monotone\" \n                                dataKey=\"sumOfYears\" \n                                stroke=\"#22c55e\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#22c55e\", strokeWidth: 2, r: 4 }}\n                                connectNulls={true}\n                                name=\"Sum-of-Years-Digits\"\n                              />\n                              <Line \n                                type=\"monotone\" \n                                dataKey=\"macrs\" \n                                stroke=\"#f59e0b\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#f59e0b\", strokeWidth: 2, r: 4 }}\n                                connectNulls={true}\n                                name=\"MACRS\"\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </ChartContainer>\n                      </CardContent>\n                    </Card>\n\n                    {/* Depreciation Data Table */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <Database className=\"mr-2 h-5 w-5\" />\n                          Depreciation Analysis Data Details\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                            <thead>\n                              <tr className=\"bg-gray-50\">\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Year</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Straight-Line</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Double Declining</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Sum-of-Years-Digits</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">MACRS</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Method Comparison</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {processDepreciationData(responseData).map((item: any, index: number) => (\n                                <tr key={index} className={index % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"}>\n                                  <td className=\"border border-gray-300 px-3 py-2 font-semibold\">{item.year}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 font-semibold text-blue-600\">{formatCurrency(item.straightLine)}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 font-semibold text-red-600\">{formatCurrency(item.doubleDeclining)}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 font-semibold text-green-600\">{formatCurrency(item.sumOfYears)}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 font-semibold text-orange-600\">{formatCurrency(item.macrs)}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-xs text-gray-600\">\n                                    {index === 0 ? \"Initial Cost\" : \n                                     Math.max(item.straightLine, item.doubleDeclining, item.sumOfYears, item.macrs) === item.straightLine ? \"Straight-Line Highest\" :\n                                     Math.max(item.straightLine, item.doubleDeclining, item.sumOfYears, item.macrs) === item.doubleDeclining ? \"Double Declining Highest\" :\n                                     Math.max(item.straightLine, item.doubleDeclining, item.sumOfYears, item.macrs) === item.sumOfYears ? \"Sum-of-Years Highest\" :\n                                     \"MACRS Highest\"}\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  {/* Utilization Analysis Tab */}\n                  <TabsContent value=\"utilization\" className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <TrendingUp className=\"mr-2 h-5 w-5\" />\n                          Equipment Utilization vs Residual Values\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <ChartContainer\n                          config={{\n                            residualPercent: {\n                              label: \"Residual %\",\n                              color: \"#3b82f6\",\n                            },\n                            effectiveAge: {\n                              label: \"Effective Age\",\n                              color: \"#ef4444\",\n                            },\n                          }}\n                          className=\"h-[400px]\"\n                        >\n                          <ResponsiveContainer width=\"100%\" height=\"100%\">\n                            <LineChart data={processUtilizationData(responseData)}>\n                              <CartesianGrid strokeDasharray=\"3 3\" />\n                              <XAxis \n                                dataKey=\"hoursPerYear\" \n                                label={{ value: 'Hours Per Year', position: 'insideBottom', offset: -10 }}\n                              />\n                              <YAxis \n                                yAxisId=\"left\" \n                                domain={[60, 85]} \n                                tick={{ fill: '#3b82f6' }}\n                                label={{ value: 'Residual %', angle: -90, position: 'insideLeft', style: { textAnchor: 'middle', fill: '#3b82f6' } }} \n                              />\n                              <YAxis \n                                yAxisId=\"right\" \n                                orientation=\"right\" \n                                domain={[1, 4]} \n                                tick={{ fill: '#ef4444' }}\n                                label={{ value: 'Effective Age', angle: 90, position: 'insideRight', style: { textAnchor: 'middle', fill: '#ef4444' } }} \n                              />\n                              <ChartTooltip \n                                content={<ChartTooltipContent \n                                  formatter={(value, name) => [\n                                    name === \"residualPercent\" ? `${value}%` : `${value} years`,\n                                    name === \"residualPercent\" ? \"Residual %\" : \"Effective Age\"\n                                  ]}\n                                />} \n                              />\n                              <ChartLegend content={<ChartLegendContent />} />\n                              <Line \n                                yAxisId=\"left\"\n                                type=\"monotone\" \n                                dataKey=\"residualPercent\" \n                                stroke=\"#3b82f6\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#3b82f6\", strokeWidth: 2, r: 6 }}\n                                connectNulls={true}\n                                name=\"Residual %\"\n                              />\n                              <Line \n                                yAxisId=\"right\"\n                                type=\"monotone\" \n                                dataKey=\"effectiveAge\" \n                                stroke=\"#ef4444\" \n                                strokeWidth={3}\n                                dot={{ fill: \"#ef4444\", strokeWidth: 2, r: 6 }}\n                                connectNulls={true}\n                                name=\"Effective Age\"\n                              />\n                            </LineChart>\n                          </ResponsiveContainer>\n                        </ChartContainer>\n                      </CardContent>\n                    </Card>\n\n                    {/* Residual Data Table */}\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <Database className=\"mr-2 h-5 w-5\" />\n                          Residual Analysis Data Details\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                            <thead>\n                              <tr className=\"bg-gray-50\">\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Source</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Make/Model</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Year</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Age</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Total Hours</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Hours/Year</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Current Price</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Residual %</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Effective Age</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {processUtilizationData(responseData).map((item: any, index: number) => (\n                                <tr key={index} className={index % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"}>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.id}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.make} {item.model}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.year}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{2025 - item.year}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.hoursTotal?.toLocaleString()}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.hoursPerYear?.toLocaleString()}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm font-semibold text-green-600\">${item.residualValue?.toLocaleString()}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm font-semibold text-blue-600\">{item.residualPercent}%</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.effectiveAge}</td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n                  {/* Market Data Tab */}\n                  <TabsContent value=\"market\" className=\"space-y-6\">\n                    <Card>\n                      <CardHeader>\n                        <CardTitle className=\"flex items-center\">\n                          <PieChart className=\"mr-2 h-5 w-5\" />\n                          Equipment Market Comparables Analysis\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent>\n                        <div className=\"overflow-x-auto\">\n                          <table className=\"w-full border-collapse border border-gray-300 text-sm\">\n                            <thead>\n                              <tr className=\"bg-gray-50\">\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Description</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Year</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Hours</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Serial Number</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Dealer</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Location</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Phone</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Price</th>\n                                <th className=\"border border-gray-300 px-3 py-2 text-left\">Listing</th>\n                              </tr>\n                            </thead>\n                            <tbody>\n                              {processMarketData(responseData).map((item: any, index: number) => (\n                                <tr key={index} className={index % 2 === 0 ? \"bg-white\" : \"bg-gray-50\"}>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.description}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.year}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.hours}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-xs font-mono\">{item.serialNumber}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.dealer}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.location}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">{item.phone}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm font-semibold text-green-600\">{item.price}</td>\n                                  <td className=\"border border-gray-300 px-3 py-2 text-sm\">\n                                    {item.url ? (\n                                      <a \n                                        href={item.url} \n                                        target=\"_blank\" \n                                        rel=\"noopener noreferrer\"\n                                        className=\"text-blue-600 hover:text-blue-800 underline\"\n                                      >\n                                        View Listing\n                                      </a>\n                                    ) : (\n                                      <span className=\"text-gray-400\">N/A</span>\n                                    )}\n                                  </td>\n                                </tr>\n                              ))}\n                            </tbody>\n                          </table>\n                        </div>\n                        \n                        {/* Price vs Hours Chart */}\n                        <div className=\"mt-6\">\n                          <h4 className=\"font-semibold text-gray-900 mb-4\">Price vs Operating Hours</h4>\n                          <ChartContainer\n                            config={{\n                              priceValue: {\n                                label: \"Current Price\",\n                                color: \"#22c55e\",\n                              },\n                            }}\n                            className=\"h-[400px]\"\n                          >\n                            <ResponsiveContainer width=\"100%\" height=\"100%\">\n                              <BarChart \n                                data={processMarketData(responseData).sort((a, b) => a.hours - b.hours)}\n                                margin={{ top: 20, right: 30, left: 20, bottom: 60 }}\n                              >\n                                <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#e5e7eb\" />\n                                <XAxis \n                                  dataKey=\"hours\" \n                                  type=\"number\"\n                                  domain={['dataMin - 100', 'dataMax + 100']}\n                                  tickFormatter={(value) => `${value.toLocaleString()}h`}\n                                  label={{ \n                                    value: 'Operating Hours', \n                                    position: 'insideBottom', \n                                    offset: -5,\n                                    style: { textAnchor: 'middle' }\n                                  }}\n                                />\n                                <YAxis \n                                  tickFormatter={(value) => `$${(value/1000).toFixed(0)}k`}\n                                  label={{ \n                                    value: 'Current Price ($)', \n                                    angle: -90, \n                                    position: 'insideLeft',\n                                    style: { textAnchor: 'middle' }\n                                  }}\n                                />\n                                <ChartTooltip \n                                  content={<ChartTooltipContent \n                                    formatter={(value, name) => [\n                                      `$${Number(value).toLocaleString()}`, \n                                      \"Current Price\"\n                                    ]}\n                                    labelFormatter={(label) => `${Number(label).toLocaleString()} hours`}\n                                  />} \n                                />\n                                <Bar \n                                  dataKey=\"priceValue\" \n                                  fill=\"#22c55e\" \n                                  stroke=\"#16a34a\"\n                                  strokeWidth={1}\n                                  name=\"Current Price\"\n                                  radius={[4, 4, 0, 0]}\n                                />\n                              </BarChart>\n                            </ResponsiveContainer>\n                          </ChartContainer>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  </TabsContent>\n\n\n                </Tabs>\n\n                {/* Action Buttons */}\n                <div className=\"flex justify-center space-x-4 pt-6 border-t border-gray-200\">\n                  <Button \n                    type=\"button\" \n                    onClick={resetForm}\n                    className=\"bg-red-500 hover:bg-red-600 text-white font-medium py-2 px-6 flex items-center space-x-2\"\n                  >\n                    <RefreshCw className=\"h-4 w-4\" />\n                    <span>Submit Another Form</span>\n                  </Button>\n                  \n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={() => setShowJsonResponse(!showJsonResponse)}\n                    className=\"border-blue-500 text-blue-500 hover:bg-blue-50 font-medium py-2 px-6 flex items-center space-x-2\"\n                  >\n                    <FileText className=\"h-4 w-4\" />\n                    <span>{showJsonResponse ? 'Hide' : 'Read'} JSON Response</span>\n                  </Button>\n                  \n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={downloadExcelReport}\n                    className=\"border-green-500 text-green-500 hover:bg-green-50 font-medium py-2 px-6 flex items-center space-x-2\"\n                  >\n                    <Download className=\"h-4 w-4\" />\n                    <span>Download Excel Data</span>\n                  </Button>\n                  \n                  <Button \n                    type=\"button\" \n                    variant=\"outline\"\n                    onClick={downloadPDFReport}\n                    className=\"border-purple-500 text-purple-500 hover:bg-purple-50 font-medium py-2 px-6 flex items-center space-x-2\"\n                  >\n                    <FileText className=\"h-4 w-4\" />\n                    <span>Download PDF Report</span>\n                  </Button>\n                </div>\n\n                {/* JSON Response Viewer */}\n                {showJsonResponse && (\n                  <Card className=\"mt-6\">\n                    <CardHeader>\n                      <CardTitle className=\"flex items-center\">\n                        <FileText className=\"mr-2 h-5 w-5\" />\n                        Raw JSON Response\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <div className=\"bg-gray-50 rounded-lg p-4 max-h-96 overflow-auto border\">\n                        <pre className=\"text-xs text-gray-800 whitespace-pre-wrap font-mono leading-relaxed\">\n                          {JSON.stringify(responseData, null, 2)}\n                        </pre>\n                      </div>\n                      <div className=\"mt-4 flex justify-end\">\n                        <Button\n                          type=\"button\"\n                          onClick={() => {\n                            navigator.clipboard.writeText(JSON.stringify(responseData, null, 2));\n                            toast({\n                              title: \"Copied to clipboard\",\n                              description: \"JSON response has been copied to your clipboard.\",\n                            });\n                          }}\n                          variant=\"outline\"\n                          size=\"sm\"\n                          className=\"flex items-center space-x-2\"\n                        >\n                          <Copy className=\"h-4 w-4\" />\n                          <span>Copy JSON</span>\n                        </Button>\n                      </div>\n                    </CardContent>\n                  </Card>\n                )}\n              </div>\n            )}\n\n            {/* Show form only if not waiting and no response received */}\n            {!isWaiting && !responseReceived && (\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n              {/* Basic Information */}\n              <div className=\"border-b border-gray-200 pb-6\">\n                <h2 className=\"text-lg font-semibold text-black mb-4\">Basic Information</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"lesseeName\">Lessee Name *</Label>\n                    <Input\n                      id=\"lesseeName\"\n                      placeholder=\"Enter lessee name\"\n                      {...form.register(\"lesseeName\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.lesseeName && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.lesseeName.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"lesseeEmail\">Lessee Email *</Label>\n                    <Input\n                      id=\"lesseeEmail\"\n                      type=\"email\"\n                      placeholder=\"Enter lessee email\"\n                      {...form.register(\"lesseeEmail\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.lesseeEmail && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.lesseeEmail.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"source\">Source *</Label>\n                    <Input\n                      id=\"source\"\n                      placeholder=\"Enter source\"\n                      {...form.register(\"source\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.source && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.source.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Equipment Details */}\n              <div className=\"border-b border-gray-200 pb-6\">\n                <h2 className=\"text-lg font-semibold text-black mb-4\">Equipment Details</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"itemName\">Item Name *</Label>\n                    <Input\n                      id=\"itemName\"\n                      placeholder=\"Enter item name\"\n                      {...form.register(\"itemName\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.itemName && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.itemName.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"make\">Make *</Label>\n                    <Input\n                      id=\"make\"\n                      placeholder=\"Enter make\"\n                      {...form.register(\"make\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.make && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.make.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"model\">Model *</Label>\n                    <Input\n                      id=\"model\"\n                      placeholder=\"Enter model\"\n                      {...form.register(\"model\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.model && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.model.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"assetType\">Asset Type *</Label>\n                    <Select onValueChange={(value) => form.setValue(\"assetType\", value)} defaultValue=\"Construction Equipment\">\n                      <SelectTrigger className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\">\n                        <SelectValue placeholder=\"Select asset type\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Heavy Equipment\">Heavy Equipment</SelectItem>\n                        <SelectItem value=\"Construction Equipment\">Construction Equipment</SelectItem>\n                        <SelectItem value=\"Agricultural Equipment\">Agricultural Equipment</SelectItem>\n                        <SelectItem value=\"Transportation\">Transportation</SelectItem>\n                        <SelectItem value=\"Industrial Equipment\">Industrial Equipment</SelectItem>\n                        <SelectItem value=\"Other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.assetType && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.assetType.message}</p>\n                    )}\n                  </div>\n                </div>\n                <div className=\"mt-4\">\n                  <Label htmlFor=\"itemDescription\">Item Description</Label>\n                  <Textarea\n                    id=\"itemDescription\"\n                    placeholder=\"Enter detailed item description\"\n                    rows={3}\n                    {...form.register(\"itemDescription\")}\n                    className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                  />\n                </div>\n              </div>\n\n              {/* Meter Information */}\n              <div className=\"border-b border-gray-200 pb-6\">\n                <h2 className=\"text-lg font-semibold text-black mb-4\">Meter Information</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"currentMeter\">Current Meter *</Label>\n                    <Input\n                      id=\"currentMeter\"\n                      type=\"number\"\n                      placeholder=\"Enter current meter reading\"\n                      {...form.register(\"currentMeter\", { valueAsNumber: true })}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.currentMeter && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.currentMeter.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"proposedMeter\">Proposed Meter *</Label>\n                    <Input\n                      id=\"proposedMeter\"\n                      type=\"number\"\n                      placeholder=\"Enter proposed meter reading\"\n                      {...form.register(\"proposedMeter\", { valueAsNumber: true })}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.proposedMeter && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.proposedMeter.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"meterUnit\">Meter Unit *</Label>\n                    <Select onValueChange={(value) => form.setValue(\"meterUnit\", value)} defaultValue=\"HPY\">\n                      <SelectTrigger className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\">\n                        <SelectValue placeholder=\"Select unit\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"hours\">Hours</SelectItem>\n                        <SelectItem value=\"miles\">Miles</SelectItem>\n                        <SelectItem value=\"kilometers\">Kilometers</SelectItem>\n                        <SelectItem value=\"cycles\">Cycles</SelectItem>\n                        <SelectItem value=\"HPY\">HPY</SelectItem>\n                        <SelectItem value=\"other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.meterUnit && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.meterUnit.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Financial Information */}\n              <div className=\"border-b border-gray-200 pb-6\">\n                <h2 className=\"text-lg font-semibold text-black mb-4\">Financial Information</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"subjectPrice\">Subject Price *</Label>\n                    <div className=\"relative\">\n                      <span className=\"absolute left-3 top-2 text-gray-500\">$</span>\n                      <Input\n                        id=\"subjectPrice\"\n                        type=\"number\"\n                        step=\"0.01\"\n                        placeholder=\"0.00\"\n                        {...form.register(\"subjectPrice\", { valueAsNumber: true })}\n                        className=\"pl-8 focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                      />\n                    </div>\n                    {form.formState.errors.subjectPrice && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.subjectPrice.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Business Information */}\n              <div className=\"border-b border-gray-200 pb-6\">\n                <h2 className=\"text-lg font-semibold text-black mb-4\">Business Information</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n                  <div>\n                    <Label htmlFor=\"industry\">Industry *</Label>\n                    <Select onValueChange={(value) => form.setValue(\"industry\", value)} defaultValue=\"Construction\">\n                      <SelectTrigger className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\">\n                        <SelectValue placeholder=\"Select industry\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"Construction\">Construction</SelectItem>\n                        <SelectItem value=\"Agriculture\">Agriculture</SelectItem>\n                        <SelectItem value=\"Transportation\">Transportation</SelectItem>\n                        <SelectItem value=\"Manufacturing\">Manufacturing</SelectItem>\n                        <SelectItem value=\"Mining\">Mining</SelectItem>\n                        <SelectItem value=\"Forestry\">Forestry</SelectItem>\n                        <SelectItem value=\"Other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.industry && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.industry.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"status\">Status *</Label>\n                    <Select onValueChange={(value) => form.setValue(\"status\", value)} defaultValue=\"New\">\n                      <SelectTrigger className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\">\n                        <SelectValue placeholder=\"Select status\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"New\">New</SelectItem>\n                        <SelectItem value=\"Active\">Active</SelectItem>\n                        <SelectItem value=\"Pending\">Pending</SelectItem>\n                        <SelectItem value=\"Expired\">Expired</SelectItem>\n                        <SelectItem value=\"Cancelled\">Cancelled</SelectItem>\n                        <SelectItem value=\"Under Review\">Under Review</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.status && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.status.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Lease Terms */}\n              <div className=\"pb-6\">\n                <h2 className=\"text-lg font-semibold text-black mb-4\">Lease Terms</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n                  <div>\n                    <Label htmlFor=\"application\">Application *</Label>\n                    <Input\n                      id=\"application\"\n                      placeholder=\"Enter application\"\n                      {...form.register(\"application\")}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.application && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.application.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"structure\">Structure *</Label>\n                    <Select onValueChange={(value) => form.setValue(\"structure\", value)} defaultValue=\"FMV\">\n                      <SelectTrigger className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\">\n                        <SelectValue placeholder=\"Select structure\" />\n                      </SelectTrigger>\n                      <SelectContent>\n                        <SelectItem value=\"FMV\">FMV</SelectItem>\n                        <SelectItem value=\"Operating Lease\">Operating Lease</SelectItem>\n                        <SelectItem value=\"Capital Lease\">Capital Lease</SelectItem>\n                        <SelectItem value=\"Finance Lease\">Finance Lease</SelectItem>\n                        <SelectItem value=\"Rental\">Rental</SelectItem>\n                        <SelectItem value=\"Other\">Other</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    {form.formState.errors.structure && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.structure.message}</p>\n                    )}\n                  </div>\n                  <div>\n                    <Label htmlFor=\"termMonths\">Term in Months *</Label>\n                    <Input\n                      id=\"termMonths\"\n                      type=\"number\"\n                      min=\"1\"\n                      max=\"240\"\n                      placeholder=\"Enter term in months\"\n                      {...form.register(\"termMonths\", { valueAsNumber: true })}\n                      className=\"focus:ring-2 focus:ring-red-500 focus:border-red-500\"\n                    />\n                    {form.formState.errors.termMonths && (\n                      <p className=\"text-red-500 text-sm mt-1\">{form.formState.errors.termMonths.message}</p>\n                    )}\n                  </div>\n                </div>\n              </div>\n\n              {/* Submit Button */}\n              <div className=\"flex justify-end pt-6 border-t border-gray-200\">\n                <Button\n                  type=\"submit\"\n                  disabled={isSubmitting}\n                  className=\"bg-red-500 hover:bg-red-600 text-white font-medium py-3 px-8 ami-red-hover flex items-center\"\n                >\n                  {isSubmitting ? (\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                  ) : (\n                    <Send className=\"mr-2 h-4 w-4\" />\n                  )}\n                  {isSubmitting ? \"Submitting...\" : \"Submit Form\"}\n                </Button>\n              </div>\n            </form>\n            )}\n          </CardContent>\n        </Card>\n      </main>\n    </div>\n  );\n}\n","size_bytes":106118},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"server/redis.ts":{"content":"import { createClient } from 'redis';\n\nlet redisClient: any = null;\nlet redisAvailable = false;\n\n// In-memory fallback cache\nconst memoryCache = new Map<string, any>();\n\n// Initialize Redis client\nexport async function initRedis() {\n  try {\n    redisClient = createClient({\n      url: process.env.REDIS_URL || 'redis://localhost:6379',\n      socket: {\n        reconnectStrategy: () => false // Don't auto-reconnect\n      }\n    });\n\n    redisClient.on('error', (err: any) => {\n      console.warn('Redis unavailable, using in-memory cache fallback');\n      redisAvailable = false;\n    });\n\n    redisClient.on('connect', () => {\n      console.log('Redis cache connected');\n      redisAvailable = true;\n    });\n\n    await redisClient.connect();\n    redisAvailable = true;\n    return redisClient;\n  } catch (error) {\n    console.warn('Redis unavailable, using in-memory cache fallback');\n    redisAvailable = false;\n    return null;\n  }\n}\n\n// Get cached response by item description\nexport async function getCachedResponse(itemDescription: string): Promise<any | null> {\n  const cacheKey = `residual_analysis:${itemDescription.toLowerCase().trim()}`;\n  \n  // Use Redis if available\n  if (redisAvailable && redisClient) {\n    try {\n      const cachedData = await redisClient.get(cacheKey);\n      if (cachedData) {\n        console.log(`Redis cache hit for item: ${itemDescription}`);\n        return JSON.parse(cachedData);\n      }\n    } catch (error) {\n      console.warn('Redis get error, falling back to memory cache:', error);\n      redisAvailable = false;\n    }\n  }\n  \n  // Fallback to memory cache\n  if (memoryCache.has(cacheKey)) {\n    console.log(`Memory cache hit for item: ${itemDescription}`);\n    return memoryCache.get(cacheKey);\n  }\n  \n  console.log(`Cache miss for item: ${itemDescription}`);\n  return null;\n}\n\n// Cache response by item description (indefinite storage)\nexport async function setCachedResponse(itemDescription: string, responseData: any): Promise<void> {\n  const cacheKey = `residual_analysis:${itemDescription.toLowerCase().trim()}`;\n  \n  // Use Redis if available\n  if (redisAvailable && redisClient) {\n    try {\n      await redisClient.set(cacheKey, JSON.stringify(responseData));\n      console.log(`Redis cached response for item: ${itemDescription}`);\n    } catch (error) {\n      console.warn('Redis set error, falling back to memory cache:', error);\n      redisAvailable = false;\n    }\n  }\n  \n  // Always store in memory cache as backup\n  memoryCache.set(cacheKey, responseData);\n  console.log(`Memory cached response for item: ${itemDescription}`);\n}\n\n// Get cache statistics\nexport async function getCacheStats(): Promise<{ totalKeys: number; keys: string[]; source: string }> {\n  let redisKeys: string[] = [];\n  let memoryKeys: string[] = [];\n  \n  // Get Redis keys if available\n  if (redisAvailable && redisClient) {\n    try {\n      redisKeys = await redisClient.keys('residual_analysis:*');\n      redisKeys = redisKeys.map((key: string) => key.replace('residual_analysis:', ''));\n    } catch (error) {\n      console.warn('Redis stats error:', error);\n    }\n  }\n  \n  // Get memory cache keys\n  memoryKeys = Array.from(memoryCache.keys()).map((key: string) => key.replace('residual_analysis:', ''));\n  \n  // Combine and deduplicate\n  const allKeys = Array.from(new Set([...redisKeys, ...memoryKeys]));\n  \n  return {\n    totalKeys: allKeys.length,\n    keys: allKeys,\n    source: redisAvailable ? 'Redis + Memory' : 'Memory Only'\n  };\n}\n\nexport { redisClient };","size_bytes":3491}}}